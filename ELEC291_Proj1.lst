                  2   $LIST
0000              4   
0000              5   org 0000H
0000 0204F3       6      ljmp MyProgram
0003              7      
000B              8   org 0x000B
000B 0204E5       9            ljmp Timer0_ISR
000E             10   ; Timer/Counter 2 overflow interrupt vector
002B             11   org 0x002B
002B 02048B      12            ljmp Timer2_ISR
002E             13   
002E             14   ; These register definitions needed by 'math32.inc'
0030             15   DSEG at 30H
0030             16   x:   ds 4
0034             17   y:   ds 4
0038             18   z:   ds 4
003C             19   bcd: ds 5
0041             20   T2ov: ds 2 ; 16-bit timer 2 overflow (to measure the period of very slow signals)
0043             21   Seed: ds 4
0047             22   p1Score: ds 1
0048             23   p2Score: ds 1
0049             24   capacitance: ds 4
004D             25   
004D             26   
0000             27   BSEG
0000             28   mf: dbit 1
0001             29   
                570   $LIST
                 31   $LIST
02C4             33   
02C4             34   cseg
02C4             35   ; These 'equ' must match the hardware wiring
02C4             36   LCD_RS equ P3.2
02C4             37   ;LCD_RW equ PX.X ; Not used in this code, connect the pin to GND
02C4             38   LCD_E  equ P3.3
02C4             39   LCD_D4 equ P3.4
02C4             40   LCD_D5 equ P3.5
02C4             41   LCD_D6 equ P3.6
02C4             42   LCD_D7 equ P3.7
02C4             43   
                 45   	$LIST
0370             47   
0370             48   CLK           EQU 22118400 ; Microcontroller system crystal frequency in Hz
0370             49   TIMER0_OFF_RATE    EQU 65536
0370             50   TIMER0_OFF_RELOAD EQU ((65536-(CLK/TIMER0_OFF_RATE)))
0370             51   TIMER0_RATE   EQU 1000     ; 2048Hz squarewave (peak amplitude of CEM-1203 speaker)
0370             52   TIMER0_RATE_HIGH EQU 4096
0370             53   TIMER0_RATE_LOW EQU 1000
0370             54   TIMER0_RELOAD EQU ((65536-(CLK/TIMER0_RATE)))
0370             55   TIMER0_RELOAD_HIGH EQU ((65536-(CLK/TIMER0_RATE_HIGH)))
0370             56   TIMER2_RATE   EQU 1000     ; 1000Hz, for a timer tick of 1ms
0370             57   ;Timer0_Rate used to change pitch
0370             58   TIMER2_RELOAD EQU ((65536-(CLK/TIMER2_RATE)))
0370             59   
0370             60   ;Music Frequencies
0370             61   TIMER0_RATE_A   EQU 440 
0370             62   
0370             63   
0370             64   cseg
0370             65   
0370             66   SOUND_OUT equ P1.1
0370             67   SOUND_OUT1 equ P2.3
0370             68   Player_One equ P2.1
0370             69   Player_Two equ P0.0
0370             70   
0370             71   
0370             72   ;                        1234567890123456    <- This helps determine the location of the counter
0370 50312020    73   Initial_Message:         db 'P1            P2', 0
     20202020
     20202020
     20205032
     00
0381 30302020    74   Overflow_Str:            db '00           00', 0
     20202020
     20202020
     20303000
0391 506C6179    75   Player_One_Text:         db 'Player 1: ', 0
     65722031
     3A2000
039C 506C6179    76   Player_Two_Text:         db 'Player 2: ',0
     65722032
     3A2000
03A7 436F6E67    77   Player_Win1:             db 'Congratulations ', 0
     72617475
     6C617469
     6F6E7320
     00
03B8 506C6179    78   Player_One_Win2:         db 'Player1 wins!   ', 0
     65723120
     77696E73
     21202020
     00
03C9 506C6179    79   Player_Two_Win2:         db 'Player2 wins!   ', 0
     65723220
     77696E73
     21202020
     00
03DA 20202020    80   Ready_Str:                       db '     Ready?     ', 0
     20526561
     64793F20
     20202020
     00
03EB 20202020    81   Ready_3:                         db '       3        ', 0
     20202033
     20202020
     20202020
     00
03FC 20202020    82   Ready_2:                         db '       2        ', 0
     20202032
     20202020
     20202020
     00
040D 20202020    83   Ready_1:                         db '       1        ', 0
     20202031
     20202020
     20202020
     00
041E 20202020    84   Go:                              db '      Go!       ', 0
     2020476F
     21202020
     20202020
     00
042F 20202050    85   Play_Again:                      db '   Play Again?  ', 0
     6C617920
     41676169
     6E3F2020
     00
0440 20202050    86   Hit_Reset:                       db '   Press Reset  ', 0
     72657373
     20526573
     65742020
     00
0451             87   
0451             88   
0451             89   ; Sends 10-digit BCD number in bcd to the LCD
0451             90   Display_10_digit_BCD:
0451 C000        91            push ar0
0453 A840        91            mov r0, bcd+4
0455 12035A      91            lcall ?Display_BCD
0458 D000        91            pop ar0
045A C000        92            push ar0
045C A83F        92            mov r0, bcd+3
045E 12035A      92            lcall ?Display_BCD
0461 D000        92            pop ar0
0463 C000        93            push ar0
0465 A83E        93            mov r0, bcd+2
0467 12035A      93            lcall ?Display_BCD
046A D000        93            pop ar0
046C C000        94            push ar0
046E A83D        94            mov r0, bcd+1
0470 12035A      94            lcall ?Display_BCD
0473 D000        94            pop ar0
0475 C000        95            push ar0
0477 A83C        95            mov r0, bcd+0
0479 12035A      95            lcall ?Display_BCD
047C D000        95            pop ar0
047E 22          96            ret
047F             97   
047F             98   ;Initializes timer/counter 2 as a 16-bit timer
047F             99   InitTimer2:
047F 75C800     100            mov T2CON, #0 ; Stop timer/counter.  Set as timer (clock input is pin 22.1184MHz).
0482            101            ; Set the reload value on overflow to zero (just in case is not zero)
0482 75CB00     102            mov RCAP2H, #0
0485 75CA00     103            mov RCAP2L, #0
0488 D2AD       104            setb ET2
048A 22         105       ret
048B            106   
048B            107   Timer2_ISR:
048B C2CF       108            clr TF2  ; Timer 2 doesn't clear TF2 automatically. Do it in ISR
048D C0E0       109            push acc
048F 0541       110            inc T2ov+0
0491 E541       111            mov a, T2ov+0
0493 7002       112            jnz Timer2_ISR_done
0495 0542       113            inc T2ov+1
0497            114   Timer2_ISR_done:
0497 D0E0       115            pop acc
0499 32         116            reti
049A            117   
049A            118   Timer0_Init:
049A E589       119            mov a, TMOD
049C 54F0       120            anl a, #0xf0 ; Clear the bits for timer 0
049E 4401       121            orl a, #0x01 ; Configure timer 0 as 16-timer
04A0 F589       122            mov TMOD, a
04A2 758CA9     123            mov TH0, #high(TIMER0_RELOAD)
04A5 758A9A     124            mov TL0, #low(TIMER0_RELOAD)
04A8            125            ; Set autoreload value
04A8 75F4A9     126            mov RH0, #high(TIMER0_RELOAD)
04AB 75F29A     127            mov RL0, #low(TIMER0_RELOAD)
04AE            128            ; Enable the timer and interrupts
04AE D2A9       129       setb ET0  ; Enable timer 0 interrupt
04B0 D28C       130       setb TR0  ; Start timer 0
04B2 22         131            ret
04B3            132            
04B3            133   Timer0_HIGH_Init:
04B3 E589       134            mov a, TMOD
04B5 54F0       135            anl a, #0xf0 ; Clear the bits for timer 0
04B7 4401       136            orl a, #0x01 ; Configure timer 0 as 16-timer
04B9 F589       137            mov TMOD, a
04BB 758CEA     138            mov TH0, #high(TIMER0_RELOAD_HIGH)
04BE 758AE8     139            mov TL0, #low(TIMER0_RELOAD_HIGH)
04C1            140            ; Set autoreload value
04C1 75F4EA     141            mov RH0, #high(TIMER0_RELOAD_HIGH)
04C4 75F2E8     142            mov RL0, #low(TIMER0_RELOAD_HIGH)
04C7            143            ; Enable the timer and interrupts
04C7 D2A9       144       setb ET0  ; Enable timer 0 interrupt
04C9 D28C       145       setb TR0  ; Start timer 0
04CB 22         146            ret
04CC            147   
04CC            148   Timer0_OFF_Init:
04CC E589       149            mov a, TMOD
04CE 54F0       150            anl a, #0xf0 ; Clear the bits for timer 0
04D0 4401       151            orl a, #0x01 ; Configure timer 0 as 16-timer
04D2 F589       152            mov TMOD, a
04D4 758CFE     153            mov TH0, #high(TIMER0_OFF_RELOAD)
04D7 758AAF     154            mov TL0, #low(TIMER0_OFF_RELOAD)
04DA            155            ; Set autoreload value
04DA 75F4FE     156            mov RH0, #high(TIMER0_OFF_RELOAD)
04DD 75F2AF     157            mov RL0, #low(TIMER0_OFF_RELOAD)
04E0            158            ; Enable the timer and interrupts
04E0 D2A9       159       setb ET0  ; Enable timer 0 interrupt
04E2 D28C       160       setb TR0  ; Start timer 0
04E4 22         161            ret
04E5            162   Timer0_ISR:
04E5            163            ;clr TF0  ; According to the data sheet this is done for us already.
04E5 B291       164            cpl SOUND_OUT ; Connect speaker to P1.1!
04E7 B2A3       165            cpl SOUND_OUT1
04E9 32         166            reti
04EA            167   
04EA            168   ;---------------------------------;
04EA            169   ; Hardware initialization         ;
04EA            170   ;---------------------------------;
04EA            171   Initialize_All:
04EA 12047F     172       lcall InitTimer2
04ED 12031E     173       lcall LCD_4BIT ; Initialize LCD
04F0 D2AF       174       setb EA
04F2 22         175            ret
04F3            176   
04F3            177   ;---------------------------------;
04F3            178   ; Main program loop               ;
04F3            179   ;---------------------------------;
04F3            180   MyProgram:
04F3            181       ; Initialize the hardware:
04F3 75817F     182       mov SP, #7FH
04F6 1204EA     183       lcall Initialize_All
04F9 D280       184       setb P0.0 ; Pin is used as input
04FB            185       
04FB 754700     186       mov p1Score, #0
04FE 754800     187       mov p2Score, #0
0501            188       
0501 C0E0       189            push acc
0503 7401       189            mov a, #1
0505 14         189            dec a
0506 120355     189            lcall ?Set_Cursor_1 ; Select column and row
0509 D0E0       189            pop acc
050B C083       190            push dph
050D C082       190            push dpl
050F C0E0       190            push acc
0511 900370     190            mov dptr, #Initial_Message
0514 120348     190            lcall ?Send_Constant_String
0517 D0E0       190            pop acc
0519 D082       190            pop dpl
051B D083       190            pop dph
051D            191       
051D 12049A     192       lcall Timer0_Init
0520 12047F     193       lcall InitTimer2
0523            194       
0523 85CD43     195       mov Seed+0, TH2
0526 754401     196       mov Seed+1, #0x01
0529 754587     197       mov Seed+2, #0x87
052C 85CC46     198       mov Seed+3, TL2
052F            199       
052F 12094D     200       lcall One_Cycle
0532            201   forever:
0532            202       ; synchronize with rising edge of the signal applied to pin P0.0
0532 C2CA       203       clr TR2 ; Stop timer 2
0534 75CC00     204       mov TL2, #0
0537 75CD00     205       mov TH2, #0
053A 754100     206       mov T2ov+0, #0
053D 754200     207       mov T2ov+1, #0
0540 C2CF       208       clr TF2
0542 D2CA       209       setb TR2
0544            210       
0544 120554     211       lcall synch1
0547 12055E     212       lcall synch2
054A 12057A     213       lcall measure1
054D 120583     214       lcall measure2
0550 1205AF     215       lcall skip_this
0553 22         216       ret
0554            217   synch1:
0554 E542       218            mov a, T2ov+1
0556 54FE       219            anl a, #0xfe
0558 7036       220            jnz no_signal ; If the count is larger than 0x01ffffffff*45ns=1.16s, we assume there is no signal
055A 2080F7     221       jb P0.0, synch1
055D 22         222       ret
055E            223   synch2:    
055E E542       224            mov a, T2ov+1
0560 54FE       225            anl a, #0xfe
0562 702C       226            jnz no_signal
0564 3080F7     227       jnb P0.0, synch2
0567            228       ; Measure the period of the signal applied to pin P0.0
0567 C2CA       229       clr TR2
0569 75CC00     230       mov TL2, #0
056C 75CD00     231       mov TH2, #0
056F 754100     232       mov T2ov+0, #0
0572 754200     233       mov T2ov+1, #0
0575 C2CF       234       clr TF2
0577 D2CA       235       setb TR2 ; Start timer 2
0579 22         236       ret
057A            237   measure1:
057A E542       238            mov a, T2ov+1
057C 54FE       239            anl a, #0xfe
057E 7010       240            jnz no_signal 
0580 2080F7     241       jb P0.0, measure1
0583            242   measure2:    
0583 E542       243            mov a, T2ov+1
0585 54FE       244            anl a, #0xfe
0587 7007       245            jnz no_signal
0589 3080F7     246       jnb P0.0, measure2
058C C2CA       247       clr TR2 ; Stop timer 2, [T2ov+1, T2ov+0, TH2, TL2] * 45.21123ns is the period
058E            248   
058E 801F       249            sjmp skip_this
0590            250   no_signal:       
0590 C0E0       251            push acc
0592 7401       251            mov a, #1
0594 14         251            dec a
0595 120353     251            lcall ?Set_Cursor_2 ; Select column and row
0598 D0E0       251            pop acc
059A C083       252            push dph
059C C082       252            push dpl
059E C0E0       252            push acc
05A0 900381     252            mov dptr, #Overflow_Str
05A3 120348     252            lcall ?Send_Constant_String
05A6 D0E0       252            pop acc
05A8 D082       252            pop dpl
05AA D083       252            pop dph
05AC 020532     253       ljmp forever ; Repeat! 
05AF            254       
05AF            255   skip_this:
05AF            256            ; Make sure [T2ov+1, T2ov+2, TH2, TL2]!=0
05AF E5CC       257            mov a, TL2
05B1 45CD       258            orl a, TH2
05B3 4541       259            orl a, T2ov+0
05B5 4542       260            orl a, T2ov+1
05B7 60D7       261            jz no_signal
05B9            262            
05B9 120A1F     263            lcall Calculate_Period
05BC            264   
05BC 22         265       ret
05BD            266   forever2:
05BD            267       ; synchronize with rising edge of the signal applied to pin P0.0
05BD C2CA       268       clr TR2 ; Stop timer 2
05BF 75CC00     269       mov TL2, #0
05C2 75CD00     270       mov TH2, #0
05C5 754100     271       mov T2ov+0, #0
05C8 754200     272       mov T2ov+1, #0
05CB C2CF       273       clr TF2
05CD D2CA       274       setb TR2
05CF            275       
05CF 1205DF     276       lcall synch1b
05D2 1205E9     277       lcall synch2b
05D5 120605     278       lcall measure1b
05D8 12060E     279       lcall measure2b
05DB 12061E     280       lcall skip_this2
05DE 22         281       ret
05DF            282   synch1b:
05DF E542       283            mov a, T2ov+1
05E1 54FE       284            anl a, #0xfe
05E3 70AB       285            jnz no_signal ; If the count is larger than 0x01ffffffff*45ns=1.16s, we assume there is no signal
05E5 20A1F7     286       jb P2.1, synch1b
05E8 22         287       ret
05E9            288   synch2b:    
05E9 E542       289            mov a, T2ov+1
05EB 54FE       290            anl a, #0xfe
05ED 702C       291            jnz no_signal_jump
05EF 30A1F7     292       jnb P2.1, synch2b
05F2            293       ; Measure the period of the signal applied to pin P0.0
05F2 C2CA       294       clr TR2
05F4 75CC00     295       mov TL2, #0
05F7 75CD00     296       mov TH2, #0
05FA 754100     297       mov T2ov+0, #0
05FD 754200     298       mov T2ov+1, #0
0600 C2CF       299       clr TF2
0602 D2CA       300       setb TR2 ; Start timer 2
0604 22         301       ret
0605            302   measure1b:
0605 E542       303            mov a, T2ov+1
0607 54FE       304            anl a, #0xfe
0609 7010       305            jnz no_signal_jump 
060B 20A1F7     306       jb P2.1, measure1b
060E            307   measure2b:    
060E E542       308            mov a, T2ov+1
0610 54FE       309            anl a, #0xfe
0612 7007       310            jnz no_signal_jump
0614 30A1F7     311       jnb P2.1, measure2b
0617 C2CA       312       clr TR2 ; Stop timer 2, [T2ov+1, T2ov+0, TH2, TL2] * 45.21123ns is the period
0619 8003       313            sjmp skip_this2
061B            314   
061B            315   no_signal_jump:  
061B 020590     316            ljmp no_signal
061E            317       
061E            318   skip_this2:
061E            319            ; Make sure [T2ov+1, T2ov+2, TH2, TL2]!=0
061E E5CC       320            mov a, TL2
0620 45CD       321            orl a, TH2
0622 4541       322            orl a, T2ov+0
0624 4542       323            orl a, T2ov+1
0626 60F3       324            jz no_signal_jump
0628 120A1F     325            lcall Calculate_Period
062B 22         326       ret
062C            327       
062C            328   Inc_Score:
062C 120532     329            lcall forever
062F            330   
062F 7534E0     331            mov y+0, #low (940000 % 0x10000) 
0632 753557     331            mov y+1, #high(940000 % 0x10000) 
0635 75360E     331            mov y+2, #low (940000 / 0x10000) 
0638 753700     331            mov y+3, #high(940000 / 0x10000) 
063B 120152     332            lcall x_gt_y
063E            333            ;if the capacitance is greater than 200, mf will be set to 1
063E            334            
063E 200001     335            jb mf, Add_Score
0641 22         336            ret
0642            337            
0642            338   Add_Score:
0642 C200       339            clr mf
0644            340            ;inc p1Score
0644 E4         341            clr a
0645 C0E0       342            push acc
0647 7401       342            mov a, #1
0649 14         342            dec a
064A 120353     342            lcall ?Set_Cursor_2 ; Select column and row
064D D0E0       342            pop acc
064F            343            
064F E547       344            mov a, p1Score
0651 2401       345            add a, #0x01
0653 D4         346            da a
0654 F547       347            mov p1Score, a
0656 C000       348            push ar0
0658 A847       348            mov r0, p1Score
065A 12035A     348            lcall ?Display_BCD
065D D000       348            pop ar0
065F 12096B     349            lcall Compare_Score_p1
0662 020A4A     350            ljmp End_Round
0665            351            
0665            352   Inc_Score_p2:
0665 C200       353            clr mf
0667 1205BD     354            lcall forever2
066A 7534D0     355            mov y+0, #low (930000 % 0x10000) 
066D 753530     355            mov y+1, #high(930000 % 0x10000) 
0670 75360E     355            mov y+2, #low (930000 / 0x10000) 
0673 753700     355            mov y+3, #high(930000 / 0x10000) 
0676 120152     356            lcall x_gt_y
0679 200001     357            jb mf, Add_Score_p2
067C 22         358            ret
067D            359   
067D            360   Add_Score_p2:
067D C200       361            clr mf
067F E4         362            clr a
0680 C0E0       363            push acc
0682 740F       363            mov a, #15
0684 14         363            dec a
0685 120353     363            lcall ?Set_Cursor_2 ; Select column and row
0688 D0E0       363            pop acc
068A E548       364            mov a, p2Score
068C 2401       365            add a, #0x01
068E D4         366            da a
068F F548       367            mov p2Score, a
0691 C000       368            push ar0
0693 A848       368            mov r0, p2Score
0695 12035A     368            lcall ?Display_BCD
0698 D000       368            pop ar0
069A B281       369            cpl P0.1
069C C002       370            push AR2
069E 7AFF       370            mov R2, #255
06A0 1202CF     370            lcall ?Wait_Milli_Seconds
06A3 D002       370            pop AR2
06A5 C002       371            push AR2
06A7 7AFF       371            mov R2, #255
06A9 1202CF     371            lcall ?Wait_Milli_Seconds
06AC D002       371            pop AR2
06AE C002       372            push AR2
06B0 7AFF       372            mov R2, #255
06B2 1202CF     372            lcall ?Wait_Milli_Seconds
06B5 D002       372            pop AR2
06B7 C002       373            push AR2
06B9 7AFF       373            mov R2, #255
06BB 1202CF     373            lcall ?Wait_Milli_Seconds
06BE D002       373            pop AR2
06C0 B281       374            cpl P0.1
06C2 12098A     375            lcall Compare_Score_p2
06C5 020A4A     376            ljmp End_Round
06C8            377   
06C8            378   Bridge_Forever:
06C8 020532     379            ljmp forever
06CB            380            
06CB            381   ; pseudocode:
06CB            382   ;        if P1 capacitance > 50 (Can replace this number), increment P1
06CB            383   ;   if P2 capacitance > 50 , increment P2
06CB            384   ;        lcall compareScores
06CB            385   ;        ret
06CB            386   
06CB            387   Dec_Score:
06CB C200       388            clr mf
06CD 120532     389            lcall forever
06D0            390            ;lcall Calculate_Capacitance
06D0            391            ;mov x+0, capacitance+0
06D0            392            ;mov x+1, capacitance+1
06D0            393            ;mov x+2, capacitance+2
06D0            394            ;mov x+3, capacitance+3
06D0 C0E0       395            push acc
06D2 7401       395            mov a, #1
06D4 14         395            dec a
06D5 120353     395            lcall ?Set_Cursor_2 ; Select column and row
06D8 D0E0       395            pop acc
06DA C000       396            push ar0
06DC A847       396            mov r0, p1Score
06DE 12035A     396            lcall ?Display_BCD
06E1 D000       396            pop ar0
06E3 7534E0     397            mov y+0, #low (940000 % 0x10000) 
06E6 753557     397            mov y+1, #high(940000 % 0x10000) 
06E9 75360E     397            mov y+2, #low (940000 / 0x10000) 
06EC 753700     397            mov y+3, #high(940000 / 0x10000) 
06EF 120152     398            lcall x_gt_y
06F2            399            ;if the capacitance is greater than 200, mf will be set to 1
06F2            400            
06F2 200001     401            jb mf, Sub_Score
06F5 22         402            ret
06F6            403            
06F6            404   Sub_Score:
06F6 C200       405            clr mf
06F8            406            ;dec p1Score
06F8            407   
06F8            408            ;load_x(p1Score)
06F8 E547       409            mov a, p1Score
06FA 2499       410            add a, #0x99
06FC D4         411            da a
06FD F547       412            mov p1Score, a
06FF            413                    
06FF C0E0       414            push acc
0701 7401       414            mov a, #1
0703 14         414            dec a
0704 120353     414            lcall ?Set_Cursor_2 ; Select column and row
0707 D0E0       414            pop acc
0709            415            ;lcall hex2bcd
0709 C000       416            push ar0
070B A847       416            mov r0, p1Score
070D 12035A     416            lcall ?Display_BCD
0710 D000       416            pop ar0
0712 B281       417            cpl P0.1
0714 C002       418            push AR2
0716 7AFF       418            mov R2, #255
0718 1202CF     418            lcall ?Wait_Milli_Seconds
071B D002       418            pop AR2
071D C002       419            push AR2
071F 7AFF       419            mov R2, #255
0721 1202CF     419            lcall ?Wait_Milli_Seconds
0724 D002       419            pop AR2
0726 C002       420            push AR2
0728 7AFF       420            mov R2, #255
072A 1202CF     420            lcall ?Wait_Milli_Seconds
072D D002       420            pop AR2
072F C002       421            push AR2
0731 7AFF       421            mov R2, #255
0733 1202CF     421            lcall ?Wait_Milli_Seconds
0736 D002       421            pop AR2
0738 B281       422            cpl P0.1
073A            423            
073A            424            ;ret
073A 020A4A     425            ljmp End_Round
073D            426   
073D            427   Dec_Score_p2:
073D C200       428            clr mf
073F 1205BD     429            lcall forever2
0742 C0E0       430            push acc
0744 740F       430            mov a, #15
0746 14         430            dec a
0747 120353     430            lcall ?Set_Cursor_2 ; Select column and row
074A D0E0       430            pop acc
074C C000       431            push ar0
074E A848       431            mov r0, p2Score
0750 12035A     431            lcall ?Display_BCD
0753 D000       431            pop ar0
0755 7534D0     432            mov y+0, #low (930000 % 0x10000) 
0758 753530     432            mov y+1, #high(930000 % 0x10000) 
075B 75360E     432            mov y+2, #low (930000 / 0x10000) 
075E 753700     432            mov y+3, #high(930000 / 0x10000) 
0761 120152     433            lcall x_gt_y
0764            434            ;if the capacitance is greater than 200, mf will be set to 1
0764            435            
0764 200001     436            jb mf, Sub_Score_p2
0767 22         437            ret
0768            438   
0768            439   Sub_Score_p2:
0768 C200       440            clr mf
076A E548       441            mov a, p2Score
076C 2499       442            add a, #0x99
076E D4         443            da a
076F F548       444            mov p2Score, a
0771            445                    
0771 C0E0       446            push acc
0773 740F       446            mov a, #15
0775 14         446            dec a
0776 120353     446            lcall ?Set_Cursor_2 ; Select column and row
0779 D0E0       446            pop acc
077B C000       447            push ar0
077D A848       447            mov r0, p2Score
077F 12035A     447            lcall ?Display_BCD
0782 D000       447            pop ar0
0784 B281       448            cpl P0.1
0786 C002       449            push AR2
0788 7AFF       449            mov R2, #255
078A 1202CF     449            lcall ?Wait_Milli_Seconds
078D D002       449            pop AR2
078F C002       450            push AR2
0791 7AFF       450            mov R2, #255
0793 1202CF     450            lcall ?Wait_Milli_Seconds
0796 D002       450            pop AR2
0798 C002       451            push AR2
079A 7AFF       451            mov R2, #255
079C 1202CF     451            lcall ?Wait_Milli_Seconds
079F D002       451            pop AR2
07A1 C002       452            push AR2
07A3 7AFF       452            mov R2, #255
07A5 1202CF     452            lcall ?Wait_Milli_Seconds
07A8 D002       452            pop AR2
07AA B281       453            cpl P0.1
07AC 020A4A     454            ljmp End_Round
07AF            455   ; pseudocode:
07AF            456   ;        if P1 capacitance > 50 (Can replace this number), decrement P1
07AF            457   ;   if P2 capacitance > 50 , decrement P2
07AF            458   ;        ret    
07AF            459   
07AF            460   Random: 
07AF            461            ; Dont worry about this, it is just some math that is good enough to randomize numbers enough for our purposes
07AF 854330     462       mov x+0, Seed+0
07B2 854431     463       mov x+1, Seed+1
07B5 854532     464       mov x+2, Seed+2
07B8 854633     465       mov x+3, Seed+3
07BB 7534FD     466            mov y+0, #low (214013 % 0x10000) 
07BE 753543     466            mov y+1, #high(214013 % 0x10000) 
07C1 753603     466            mov y+2, #low (214013 / 0x10000) 
07C4 753700     466            mov y+3, #high(214013 / 0x10000) 
07C7 1201A8     467       lcall mul32
07CA 7534C3     468            mov y+0, #low (2531011 % 0x10000) 
07CD 75359E     468            mov y+1, #high(2531011 % 0x10000) 
07D0 753626     468            mov y+2, #low (2531011 / 0x10000) 
07D3 753700     468            mov y+3, #high(2531011 / 0x10000) 
07D6 1200F3     469       lcall add32
07D9            470       
07D9 853043     471       mov Seed+0, x+0
07DC 853144     472       mov Seed+1, x+1
07DF 853245     473       mov Seed+2, x+2
07E2 853346     474       mov Seed+3, x+3
07E5 22         475       ret
07E6            476       
07E6            477   Wait_Random_Time:
07E6 1207AF     478       lcall Random
07E9 C002       479            push AR2
07EB AA43       479            mov R2, Seed+0
07ED 1202CF     479            lcall ?Wait_Milli_Seconds
07F0 D002       479            pop AR2
07F2 1206CB     480            lcall Dec_Score
07F5 12073D     481            lcall Dec_Score_p2
07F8 C002       482            push AR2
07FA AA44       482            mov R2, Seed+1
07FC 1202CF     482            lcall ?Wait_Milli_Seconds
07FF D002       482            pop AR2
0801            483       ;Inc_Score ... so on in between each random wait time
0801 1206CB     484       lcall Dec_Score
0804 12073D     485            lcall Dec_Score_p2
0807 C002       486            push AR2
0809 AA45       486            mov R2, Seed+2
080B 1202CF     486            lcall ?Wait_Milli_Seconds
080E D002       486            pop AR2
0810 1206CB     487       lcall Dec_Score
0813 12073D     488            lcall Dec_Score_p2
0816 C002       489            push AR2
0818 AA46       489            mov R2, Seed+3
081A 1202CF     489            lcall ?Wait_Milli_Seconds
081D D002       489            pop AR2
081F 1206CB     490       lcall Dec_Score
0822 12073D     491            lcall Dec_Score_p2
0825            492            
0825 C002       493            push AR2
0827 AA43       493            mov R2, Seed+0
0829 1202CF     493            lcall ?Wait_Milli_Seconds
082C D002       493            pop AR2
082E 1206CB     494            lcall Dec_Score
0831 12073D     495            lcall Dec_Score_p2
0834 C002       496            push AR2
0836 AA44       496            mov R2, Seed+1
0838 1202CF     496            lcall ?Wait_Milli_Seconds
083B D002       496            pop AR2
083D            497       ;Inc_Score ... so on in between each random wait time
083D 1206CB     498       lcall Dec_Score
0840 12073D     499            lcall Dec_Score_p2
0843 C002       500            push AR2
0845 AA45       500            mov R2, Seed+2
0847 1202CF     500            lcall ?Wait_Milli_Seconds
084A D002       500            pop AR2
084C 1206CB     501       lcall Dec_Score
084F 12073D     502            lcall Dec_Score_p2
0852 C002       503            push AR2
0854 AA46       503            mov R2, Seed+3
0856 1202CF     503            lcall ?Wait_Milli_Seconds
0859 D002       503            pop AR2
085B 1206CB     504       lcall Dec_Score
085E 12073D     505            lcall Dec_Score_p2
0861            506            
0861 C002       507            push AR2
0863 AA43       507            mov R2, Seed+0
0865 1202CF     507            lcall ?Wait_Milli_Seconds
0868 D002       507            pop AR2
086A 1206CB     508            lcall Dec_Score
086D 12073D     509            lcall Dec_Score_p2
0870 C002       510            push AR2
0872 AA44       510            mov R2, Seed+1
0874 1202CF     510            lcall ?Wait_Milli_Seconds
0877 D002       510            pop AR2
0879            511       ;Inc_Score ... so on in between each random wait time
0879 1206CB     512       lcall Dec_Score
087C 12073D     513            lcall Dec_Score_p2
087F C002       514            push AR2
0881 AA45       514            mov R2, Seed+2
0883 1202CF     514            lcall ?Wait_Milli_Seconds
0886 D002       514            pop AR2
0888 1206CB     515       lcall Dec_Score
088B 12073D     516            lcall Dec_Score_p2
088E C002       517            push AR2
0890 AA46       517            mov R2, Seed+3
0892 1202CF     517            lcall ?Wait_Milli_Seconds
0895 D002       517            pop AR2
0897 1206CB     518       lcall Dec_Score
089A 12073D     519            lcall Dec_Score_p2
089D            520            
089D C002       521            push AR2
089F AA43       521            mov R2, Seed+0
08A1 1202CF     521            lcall ?Wait_Milli_Seconds
08A4 D002       521            pop AR2
08A6 1206CB     522            lcall Dec_Score
08A9 12073D     523            lcall Dec_Score_p2
08AC C002       524            push AR2
08AE AA44       524            mov R2, Seed+1
08B0 1202CF     524            lcall ?Wait_Milli_Seconds
08B3 D002       524            pop AR2
08B5            525       ;Inc_Score ... so on in between each random wait time
08B5 1206CB     526       lcall Dec_Score
08B8 12073D     527            lcall Dec_Score_p2
08BB C002       528            push AR2
08BD AA45       528            mov R2, Seed+2
08BF 1202CF     528            lcall ?Wait_Milli_Seconds
08C2 D002       528            pop AR2
08C4 1206CB     529       lcall Dec_Score
08C7 12073D     530            lcall Dec_Score_p2
08CA C002       531            push AR2
08CC AA46       531            mov R2, Seed+3
08CE 1202CF     531            lcall ?Wait_Milli_Seconds
08D1 D002       531            pop AR2
08D3 1206CB     532       lcall Dec_Score
08D6 12073D     533            lcall Dec_Score_p2
08D9            534       
08D9 22         535       ret    
08DA            536       
08DA            537   Wait_Constant_Time:
08DA C002       538            push AR2
08DC 7AFF       538            mov R2, #255
08DE 1202CF     538            lcall ?Wait_Milli_Seconds
08E1 D002       538            pop AR2
08E3 12062C     539            lcall Inc_Score
08E6 120665     540            lcall Inc_Score_p2
08E9 C002       541            push AR2
08EB 7AFF       541            mov R2, #255
08ED 1202CF     541            lcall ?Wait_Milli_Seconds
08F0 D002       541            pop AR2
08F2 12062C     542       lcall Inc_Score
08F5 120665     543            lcall Inc_Score_p2
08F8 C002       544            push AR2
08FA 7AFF       544            mov R2, #255
08FC 1202CF     544            lcall ?Wait_Milli_Seconds
08FF D002       544            pop AR2
0901 12062C     545       lcall Inc_Score
0904 120665     546            lcall Inc_Score_p2
0907 C002       547            push AR2
0909 7AFF       547            mov R2, #255
090B 1202CF     547            lcall ?Wait_Milli_Seconds
090E D002       547            pop AR2
0910 12062C     548       lcall Inc_Score
0913 120665     549            lcall Inc_Score_p2
0916 C002       550            push AR2
0918 7AFF       550            mov R2, #255
091A 1202CF     550            lcall ?Wait_Milli_Seconds
091D D002       550            pop AR2
091F 12062C     551       lcall Inc_Score
0922 120665     552            lcall Inc_Score_p2
0925 C002       553            push AR2
0927 7AFF       553            mov R2, #255
0929 1202CF     553            lcall ?Wait_Milli_Seconds
092C D002       553            pop AR2
092E 12062C     554       lcall Inc_Score
0931 120665     555            lcall Inc_Score_p2
0934 C002       556            push AR2
0936 7AFF       556            mov R2, #255
0938 1202CF     556            lcall ?Wait_Milli_Seconds
093B D002       556            pop AR2
093D 12062C     557       lcall Inc_Score
0940 120665     558            lcall Inc_Score_p2
0943 C002       559            push AR2
0945 7AFF       559            mov R2, #255
0947 1202CF     559            lcall ?Wait_Milli_Seconds
094A D002       559            pop AR2
094C 22         560       ret
094D            561       
094D            562   One_Cycle:
094D 120532     563            lcall forever
0950 12049A     564            lcall Timer0_Init
0953 1207E6     565            lcall Wait_Random_Time ; in here, we are continuously checking if someone slaps, if they do, we decrement
0956 120532     566            lcall forever
0959 1204B3     567       lcall Timer0_HIGH_Init
095C 120532     568       lcall forever
095F            569       ;Wait for slap, if slapped, increment score
095F 1208DA     570       lcall Wait_Constant_Time ; in here, we are continuously checking if someone slaps, if they do we increment
0962 120532     571       lcall forever
0965 12049A     572       lcall Timer0_Init
0968            573       ;Wait for slap, if slapped, decrement score
0968 02094D     574       ljmp One_Cycle
096B            575       
096B            576   Compare_Score_p1:
096B            577   ;   if p1Score == 5 , ljmp P1_Wins
096B 854730     578            mov x+0, p1Score
096E 753100     579            mov x+1, #0
0971 753200     580            mov x+2, #0
0974 753300     581            mov x+3, #0
0977 753405     582            mov y+0, #low (5 % 0x10000) 
097A 753500     582            mov y+1, #high(5 % 0x10000) 
097D 753600     582            mov y+2, #low (5 / 0x10000) 
0980 753700     582            mov y+3, #high(5 / 0x10000) 
0983 12016E     583            lcall x_eq_y
0986 200020     584            jb mf, P1_Wins
0989 22         585            ret
098A            586            
098A            587   Compare_Score_p2:
098A            588   ;        if p2Score == 5 , ljmp P2_Wins
098A 854830     589            mov x+0, p2Score
098D 753100     590            mov x+1, #0
0990 753200     591            mov x+2, #0
0993 753300     592            mov x+3, #0
0996 753405     593            mov y+0, #low (5 % 0x10000) 
0999 753500     593            mov y+1, #high(5 % 0x10000) 
099C 753600     593            mov y+2, #low (5 / 0x10000) 
099F 753700     593            mov y+3, #high(5 / 0x10000) 
09A2 12016E     594            lcall x_eq_y
09A5 20003C     595            jb mf, P2_Wins
09A8 22         596            ret
09A9            597            
09A9            598   Check_0_p1:
09A9            599            
09A9            600   
09A9            601   Check_0_p2:
09A9            602            
09A9            603   
09A9            604   P1_Wins:
09A9            605   ; Display some sort of message
09A9 C0E0       606            push acc
09AB 7401       606            mov a, #1
09AD 14         606            dec a
09AE 120355     606            lcall ?Set_Cursor_1 ; Select column and row
09B1 D0E0       606            pop acc
09B3 C083       607            push dph
09B5 C082       607            push dpl
09B7 C0E0       607            push acc
09B9 9003A7     607            mov dptr, #Player_Win1
09BC 120348     607            lcall ?Send_Constant_String
09BF D0E0       607            pop acc
09C1 D082       607            pop dpl
09C3 D083       607            pop dph
09C5 C0E0       608            push acc
09C7 7401       608            mov a, #1
09C9 14         608            dec a
09CA 120353     608            lcall ?Set_Cursor_2 ; Select column and row
09CD D0E0       608            pop acc
09CF            608   
09CF C083       609            push dph
09D1 C082       609            push dpl
09D3 C0E0       609            push acc
09D5 9003B8     609            mov dptr, #Player_One_Win2
09D8 120348     609            lcall ?Send_Constant_String
09DB D0E0       609            pop acc
09DD D082       609            pop dpl
09DF D083       609            pop dph
09E1 120BF4     610            lcall Game_Over
09E4            611            ;possibly leave in this state til reset
09E4            612            
09E4            613   P2_Wins:
09E4            614   ; display some sort of message
09E4 C0E0       615            push acc
09E6 7401       615            mov a, #1
09E8 14         615            dec a
09E9 120355     615            lcall ?Set_Cursor_1 ; Select column and row
09EC D0E0       615            pop acc
09EE C083       616            push dph
09F0 C082       616            push dpl
09F2 C0E0       616            push acc
09F4 9003A7     616            mov dptr, #Player_Win1
09F7 120348     616            lcall ?Send_Constant_String
09FA D0E0       616            pop acc
09FC D082       616            pop dpl
09FE D083       616            pop dph
0A00 C0E0       617            push acc
0A02 7401       617            mov a, #1
0A04 14         617            dec a
0A05 120353     617            lcall ?Set_Cursor_2 ; Select column and row
0A08 D0E0       617            pop acc
0A0A            617   
0A0A C083       618            push dph
0A0C C082       618            push dpl
0A0E C0E0       618            push acc
0A10 9003C9     618            mov dptr, #Player_Two_Win2
0A13 120348     618            lcall ?Send_Constant_String
0A16 D0E0       618            pop acc
0A18 D082       618            pop dpl
0A1A D083       618            pop dph
0A1C            619            ;possibly leave in this state til reset
0A1C 120BF4     620            lcall Game_Over
0A1F            621            
0A1F            622   Start_Screen:
0A1F            623   
0A1F            624   Calculate_Period:
0A1F 85CC30     625            mov x+0, TL2
0A22 85CD31     626            mov x+1, TH2
0A25 854132     627            mov x+2, T2ov+0
0A28 854233     628            mov x+3, T2ov+1
0A2B            629            
0A2B 75342D     630            mov y+0, #low (45 % 0x10000) 
0A2E 753500     630            mov y+1, #high(45 % 0x10000) 
0A31 753600     630            mov y+2, #low (45 / 0x10000) 
0A34 753700     630            mov y+3, #high(45 / 0x10000)  ; One clock pulse is 1/22.1184MHz=45.21123ns
0A37 1201A8     631            lcall mul32
0A3A 75340A     632            mov y+0, #low (10 % 0x10000) 
0A3D 753500     632            mov y+1, #high(10 % 0x10000) 
0A40 753600     632            mov y+2, #low (10 / 0x10000) 
0A43 753700     632            mov y+3, #high(10 / 0x10000)  ;mult by 1.44 by mult 144/100
0A46 1201A8     633            lcall mul32
0A49 22         634            ret
0A4A            635            
0A4A            636            
0A4A            637   End_Round:
0A4A 1204CC     638            lcall Timer0_OFF_Init
0A4D C002       639            push AR2
0A4F 7AFF       639            mov R2, #255
0A51 1202CF     639            lcall ?Wait_Milli_Seconds
0A54 D002       639            pop AR2
0A56 C002       640            push AR2
0A58 7AFF       640            mov R2, #255
0A5A 1202CF     640            lcall ?Wait_Milli_Seconds
0A5D D002       640            pop AR2
0A5F C002       641            push AR2
0A61 7AFF       641            mov R2, #255
0A63 1202CF     641            lcall ?Wait_Milli_Seconds
0A66 D002       641            pop AR2
0A68 C002       642            push AR2
0A6A 7AFF       642            mov R2, #255
0A6C 1202CF     642            lcall ?Wait_Milli_Seconds
0A6F D002       642            pop AR2
0A71 C002       643            push AR2
0A73 7AFF       643            mov R2, #255
0A75 1202CF     643            lcall ?Wait_Milli_Seconds
0A78 D002       643            pop AR2
0A7A C002       644            push AR2
0A7C 7AFF       644            mov R2, #255
0A7E 1202CF     644            lcall ?Wait_Milli_Seconds
0A81 D002       644            pop AR2
0A83 C002       645            push AR2
0A85 7AFF       645            mov R2, #255
0A87 1202CF     645            lcall ?Wait_Milli_Seconds
0A8A D002       645            pop AR2
0A8C C002       646            push AR2
0A8E 7AFF       646            mov R2, #255
0A90 1202CF     646            lcall ?Wait_Milli_Seconds
0A93 D002       646            pop AR2
0A95 C0E0       647            push acc
0A97 7401       647            mov a, #1
0A99 14         647            dec a
0A9A 120355     647            lcall ?Set_Cursor_1 ; Select column and row
0A9D D0E0       647            pop acc
0A9F C083       648            push dph
0AA1 C082       648            push dpl
0AA3 C0E0       648            push acc
0AA5 9003DA     648            mov dptr, #Ready_Str
0AA8 120348     648            lcall ?Send_Constant_String
0AAB D0E0       648            pop acc
0AAD D082       648            pop dpl
0AAF D083       648            pop dph
0AB1 C002       649            push AR2
0AB3 7AFF       649            mov R2, #255
0AB5 1202CF     649            lcall ?Wait_Milli_Seconds
0AB8 D002       649            pop AR2
0ABA C002       650            push AR2
0ABC 7AFF       650            mov R2, #255
0ABE 1202CF     650            lcall ?Wait_Milli_Seconds
0AC1 D002       650            pop AR2
0AC3 C002       651            push AR2
0AC5 7AFF       651            mov R2, #255
0AC7 1202CF     651            lcall ?Wait_Milli_Seconds
0ACA D002       651            pop AR2
0ACC C002       652            push AR2
0ACE 7AFF       652            mov R2, #255
0AD0 1202CF     652            lcall ?Wait_Milli_Seconds
0AD3 D002       652            pop AR2
0AD5 C0E0       653            push acc
0AD7 7401       653            mov a, #1
0AD9 14         653            dec a
0ADA 120355     653            lcall ?Set_Cursor_1 ; Select column and row
0ADD D0E0       653            pop acc
0ADF C083       654            push dph
0AE1 C082       654            push dpl
0AE3 C0E0       654            push acc
0AE5 9003EB     654            mov dptr, #Ready_3
0AE8 120348     654            lcall ?Send_Constant_String
0AEB D0E0       654            pop acc
0AED D082       654            pop dpl
0AEF D083       654            pop dph
0AF1            655       
0AF1 C002       656            push AR2
0AF3 7AFF       656            mov R2, #255
0AF5 1202CF     656            lcall ?Wait_Milli_Seconds
0AF8 D002       656            pop AR2
0AFA C002       657            push AR2
0AFC 7AFF       657            mov R2, #255
0AFE 1202CF     657            lcall ?Wait_Milli_Seconds
0B01 D002       657            pop AR2
0B03 C002       658            push AR2
0B05 7AFF       658            mov R2, #255
0B07 1202CF     658            lcall ?Wait_Milli_Seconds
0B0A D002       658            pop AR2
0B0C C002       659            push AR2
0B0E 7AFF       659            mov R2, #255
0B10 1202CF     659            lcall ?Wait_Milli_Seconds
0B13 D002       659            pop AR2
0B15 C0E0       660            push acc
0B17 7401       660            mov a, #1
0B19 14         660            dec a
0B1A 120355     660            lcall ?Set_Cursor_1 ; Select column and row
0B1D D0E0       660            pop acc
0B1F C083       661            push dph
0B21 C082       661            push dpl
0B23 C0E0       661            push acc
0B25 9003FC     661            mov dptr, #Ready_2
0B28 120348     661            lcall ?Send_Constant_String
0B2B D0E0       661            pop acc
0B2D D082       661            pop dpl
0B2F D083       661            pop dph
0B31            662       
0B31 C002       663            push AR2
0B33 7AFF       663            mov R2, #255
0B35 1202CF     663            lcall ?Wait_Milli_Seconds
0B38 D002       663            pop AR2
0B3A C002       664            push AR2
0B3C 7AFF       664            mov R2, #255
0B3E 1202CF     664            lcall ?Wait_Milli_Seconds
0B41 D002       664            pop AR2
0B43 C002       665            push AR2
0B45 7AFF       665            mov R2, #255
0B47 1202CF     665            lcall ?Wait_Milli_Seconds
0B4A D002       665            pop AR2
0B4C C002       666            push AR2
0B4E 7AFF       666            mov R2, #255
0B50 1202CF     666            lcall ?Wait_Milli_Seconds
0B53 D002       666            pop AR2
0B55 C0E0       667            push acc
0B57 7401       667            mov a, #1
0B59 14         667            dec a
0B5A 120355     667            lcall ?Set_Cursor_1 ; Select column and row
0B5D D0E0       667            pop acc
0B5F C083       668            push dph
0B61 C082       668            push dpl
0B63 C0E0       668            push acc
0B65 90040D     668            mov dptr, #Ready_1
0B68 120348     668            lcall ?Send_Constant_String
0B6B D0E0       668            pop acc
0B6D D082       668            pop dpl
0B6F D083       668            pop dph
0B71            669       
0B71 C002       670            push AR2
0B73 7AFF       670            mov R2, #255
0B75 1202CF     670            lcall ?Wait_Milli_Seconds
0B78 D002       670            pop AR2
0B7A C002       671            push AR2
0B7C 7AFF       671            mov R2, #255
0B7E 1202CF     671            lcall ?Wait_Milli_Seconds
0B81 D002       671            pop AR2
0B83 C002       672            push AR2
0B85 7AFF       672            mov R2, #255
0B87 1202CF     672            lcall ?Wait_Milli_Seconds
0B8A D002       672            pop AR2
0B8C C002       673            push AR2
0B8E 7AFF       673            mov R2, #255
0B90 1202CF     673            lcall ?Wait_Milli_Seconds
0B93 D002       673            pop AR2
0B95 C0E0       674            push acc
0B97 7401       674            mov a, #1
0B99 14         674            dec a
0B9A 120355     674            lcall ?Set_Cursor_1 ; Select column and row
0B9D D0E0       674            pop acc
0B9F C083       675            push dph
0BA1 C082       675            push dpl
0BA3 C0E0       675            push acc
0BA5 90041E     675            mov dptr, #Go
0BA8 120348     675            lcall ?Send_Constant_String
0BAB D0E0       675            pop acc
0BAD D082       675            pop dpl
0BAF D083       675            pop dph
0BB1            676       
0BB1 C002       677            push AR2
0BB3 7AFF       677            mov R2, #255
0BB5 1202CF     677            lcall ?Wait_Milli_Seconds
0BB8 D002       677            pop AR2
0BBA C002       678            push AR2
0BBC 7AFF       678            mov R2, #255
0BBE 1202CF     678            lcall ?Wait_Milli_Seconds
0BC1 D002       678            pop AR2
0BC3 C002       679            push AR2
0BC5 7AFF       679            mov R2, #255
0BC7 1202CF     679            lcall ?Wait_Milli_Seconds
0BCA D002       679            pop AR2
0BCC C002       680            push AR2
0BCE 7AFF       680            mov R2, #255
0BD0 1202CF     680            lcall ?Wait_Milli_Seconds
0BD3 D002       680            pop AR2
0BD5 C0E0       681            push acc
0BD7 7401       681            mov a, #1
0BD9 14         681            dec a
0BDA 120355     681            lcall ?Set_Cursor_1 ; Select column and row
0BDD D0E0       681            pop acc
0BDF C083       682            push dph
0BE1 C082       682            push dpl
0BE3 C0E0       682            push acc
0BE5 900370     682            mov dptr, #Initial_Message
0BE8 120348     682            lcall ?Send_Constant_String
0BEB D0E0       682            pop acc
0BED D082       682            pop dpl
0BEF D083       682            pop dph
0BF1 02094D     683       ljmp One_Cycle
0BF4            684   
0BF4            685   Game_Over:
0BF4 1204CC     686            lcall Timer0_OFF_Init
0BF7            687            
0BF7 C002       688            push AR2
0BF9 7AFF       688            mov R2, #255
0BFB 1202CF     688            lcall ?Wait_Milli_Seconds
0BFE D002       688            pop AR2
0C00 C002       689            push AR2
0C02 7AFF       689            mov R2, #255
0C04 1202CF     689            lcall ?Wait_Milli_Seconds
0C07 D002       689            pop AR2
0C09 C002       690            push AR2
0C0B 7AFF       690            mov R2, #255
0C0D 1202CF     690            lcall ?Wait_Milli_Seconds
0C10 D002       690            pop AR2
0C12 C002       691            push AR2
0C14 7AFF       691            mov R2, #255
0C16 1202CF     691            lcall ?Wait_Milli_Seconds
0C19 D002       691            pop AR2
0C1B C002       692            push AR2
0C1D 7AFF       692            mov R2, #255
0C1F 1202CF     692            lcall ?Wait_Milli_Seconds
0C22 D002       692            pop AR2
0C24 C002       693            push AR2
0C26 7AFF       693            mov R2, #255
0C28 1202CF     693            lcall ?Wait_Milli_Seconds
0C2B D002       693            pop AR2
0C2D C002       694            push AR2
0C2F 7AFF       694            mov R2, #255
0C31 1202CF     694            lcall ?Wait_Milli_Seconds
0C34 D002       694            pop AR2
0C36 C002       695            push AR2
0C38 7AFF       695            mov R2, #255
0C3A 1202CF     695            lcall ?Wait_Milli_Seconds
0C3D D002       695            pop AR2
0C3F            696       
0C3F C0E0       697            push acc
0C41 7401       697            mov a, #1
0C43 14         697            dec a
0C44 120355     697            lcall ?Set_Cursor_1 ; Select column and row
0C47 D0E0       697            pop acc
0C49 C083       698            push dph
0C4B C082       698            push dpl
0C4D C0E0       698            push acc
0C4F 90042F     698            mov dptr, #Play_Again
0C52 120348     698            lcall ?Send_Constant_String
0C55 D0E0       698            pop acc
0C57 D082       698            pop dpl
0C59 D083       698            pop dph
0C5B C0E0       699            push acc
0C5D 7401       699            mov a, #1
0C5F 14         699            dec a
0C60 120353     699            lcall ?Set_Cursor_2 ; Select column and row
0C63 D0E0       699            pop acc
0C65 C083       700            push dph
0C67 C082       700            push dpl
0C69 C0E0       700            push acc
0C6B 900440     700            mov dptr, #Hit_Reset
0C6E 120348     700            lcall ?Send_Constant_String
0C71 D0E0       700            pop acc
0C73 D082       700            pop dpl
0C75 D083       700            pop dph         
0C77 020BF4     701            ljmp Game_Over
0C7A            702   end
