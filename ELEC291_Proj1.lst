                  2   $LIST
0000              4   
0000              5   org 0000H
0000 02042C       6      ljmp MyProgram
0003              7      
000B              8   org 0x000B
000B 020420       9            ljmp Timer0_ISR
000E             10   ; Timer/Counter 2 overflow interrupt vector
002B             11   org 0x002B
002B 0203DF      12            ljmp Timer2_ISR
002E             13   
002E             14   ; These register definitions needed by 'math32.inc'
0030             15   DSEG at 30H
0030             16   x:   ds 4
0034             17   y:   ds 4
0038             18   bcd: ds 5
003D             19   T2ov: ds 2 ; 16-bit timer 2 overflow (to measure the period of very slow signals)
003F             20   Seed: ds 4
0043             21   p1Score: ds 3
0046             22   p2Score: ds 3
0049             23   
0000             24   BSEG
0000             25   mf: dbit 1
0001             26   
                570   $LIST
                 28   $LIST
02C4             30   
02C4             31   cseg
02C4             32   ; These 'equ' must match the hardware wiring
02C4             33   LCD_RS equ P3.2
02C4             34   ;LCD_RW equ PX.X ; Not used in this code, connect the pin to GND
02C4             35   LCD_E  equ P3.3
02C4             36   LCD_D4 equ P3.4
02C4             37   LCD_D5 equ P3.5
02C4             38   LCD_D6 equ P3.6
02C4             39   LCD_D7 equ P3.7
02C4             40   
                 42   	$LIST
0370             44   
0370             45   CLK           EQU 22118400 ; Microcontroller system crystal frequency in Hz
0370             46   TIMER0_RATE   EQU 1000     ; 2048Hz squarewave (peak amplitude of CEM-1203 speaker)
0370             47   TIMER0_RATE_HIGH EQU 4096
0370             48   TIMER0_RATE_LOW EQU 1000
0370             49   TIMER0_RELOAD EQU ((65536-(CLK/TIMER0_RATE)))
0370             50   TIMER0_RELOAD_HIGH EQU ((65536-(CLK/TIMER0_RATE_HIGH)))
0370             51   TIMER2_RATE   EQU 1000     ; 1000Hz, for a timer tick of 1ms
0370             52   ;Timer0_Rate used to change pitch
0370             53   TIMER2_RELOAD EQU ((65536-(CLK/TIMER2_RATE)))
0370             54   
0370             55   ;Music Frequencies
0370             56   TIMER0_RATE_A   EQU 440 
0370             57   
0370             58   
0370             59   cseg
0370             60   
0370             61   SOUND_OUT equ P1.1
0370             62   Player_One equ P2.1
0370             63   Player_Two equ P0.0
0370             64   
0370             65   
0370             66   ;                     1234567890123456    <- This helps determine the location of the counter
0370 50312020    67   Initial_Message:  db 'P1          P2', 0
     20202020
     20202020
     503200
037F 30302020    68   Overflow_Str:    db '00           00', 0
     20202020
     20202020
     20303000
038F 506C6179    69   Player_One_Text: db 'Player 1: ', 0
     65722031
     3A2000
039A 506C6179    70   Player_Two_Text: db 'Player 2: ',0
     65722032
     3A2000
03A5             71   
03A5             72   
03A5             73   ; Sends 10-digit BCD number in bcd to the LCD
03A5             74   Display_10_digit_BCD:
03A5 C000        75            push ar0
03A7 A83C        75            mov r0, bcd+4
03A9 12035A      75            lcall ?Display_BCD
03AC D000        75            pop ar0
03AE C000        76            push ar0
03B0 A83B        76            mov r0, bcd+3
03B2 12035A      76            lcall ?Display_BCD
03B5 D000        76            pop ar0
03B7 C000        77            push ar0
03B9 A83A        77            mov r0, bcd+2
03BB 12035A      77            lcall ?Display_BCD
03BE D000        77            pop ar0
03C0 C000        78            push ar0
03C2 A839        78            mov r0, bcd+1
03C4 12035A      78            lcall ?Display_BCD
03C7 D000        78            pop ar0
03C9 C000        79            push ar0
03CB A838        79            mov r0, bcd+0
03CD 12035A      79            lcall ?Display_BCD
03D0 D000        79            pop ar0
03D2 22          80            ret
03D3             81   
03D3             82   ;Initializes timer/counter 2 as a 16-bit timer
03D3             83   InitTimer2:
03D3 75C800      84            mov T2CON, #0 ; Stop timer/counter.  Set as timer (clock input is pin 22.1184MHz).
03D6             85            ; Set the reload value on overflow to zero (just in case is not zero)
03D6 75CB00      86            mov RCAP2H, #0
03D9 75CA00      87            mov RCAP2L, #0
03DC D2AD        88            setb ET2
03DE 22          89       ret
03DF             90   
03DF             91   Timer2_ISR:
03DF C2CF        92            clr TF2  ; Timer 2 doesn't clear TF2 automatically. Do it in ISR
03E1 C0E0        93            push acc
03E3 053D        94            inc T2ov+0
03E5 E53D        95            mov a, T2ov+0
03E7 7002        96            jnz Timer2_ISR_done
03E9 053E        97            inc T2ov+1
03EB             98   Timer2_ISR_done:
03EB D0E0        99            pop acc
03ED 32         100            reti
03EE            101   
03EE            102   Timer0_Init:
03EE E589       103            mov a, TMOD
03F0 54F0       104            anl a, #0xf0 ; Clear the bits for timer 0
03F2 4401       105            orl a, #0x01 ; Configure timer 0 as 16-timer
03F4 F589       106            mov TMOD, a
03F6 758CA9     107            mov TH0, #high(TIMER0_RELOAD)
03F9 758A9A     108            mov TL0, #low(TIMER0_RELOAD)
03FC            109            ; Set autoreload value
03FC 75F4A9     110            mov RH0, #high(TIMER0_RELOAD)
03FF 75F29A     111            mov RL0, #low(TIMER0_RELOAD)
0402            112            ; Enable the timer and interrupts
0402 D2A9       113       setb ET0  ; Enable timer 0 interrupt
0404 D28C       114       setb TR0  ; Start timer 0
0406 22         115            ret
0407            116            
0407            117   Timer0_HIGH_Init:
0407 E589       118            mov a, TMOD
0409 54F0       119            anl a, #0xf0 ; Clear the bits for timer 0
040B 4401       120            orl a, #0x01 ; Configure timer 0 as 16-timer
040D F589       121            mov TMOD, a
040F 758CEA     122            mov TH0, #high(TIMER0_RELOAD_HIGH)
0412 758AE8     123            mov TL0, #low(TIMER0_RELOAD_HIGH)
0415            124            ; Set autoreload value
0415 75F4EA     125            mov RH0, #high(TIMER0_RELOAD_HIGH)
0418 75F2E8     126            mov RL0, #low(TIMER0_RELOAD_HIGH)
041B            127            ; Enable the timer and interrupts
041B D2A9       128       setb ET0  ; Enable timer 0 interrupt
041D D28C       129       setb TR0  ; Start timer 0
041F 22         130            ret
0420            131   Timer0_ISR:
0420            132            ;clr TF0  ; According to the data sheet this is done for us already.
0420 B291       133            cpl SOUND_OUT ; Connect speaker to P1.1!
0422 32         134            reti
0423            135   
0423            136   ;---------------------------------;
0423            137   ; Hardware initialization         ;
0423            138   ;---------------------------------;
0423            139   Initialize_All:
0423 1203D3     140       lcall InitTimer2
0426 12031E     141       lcall LCD_4BIT ; Initialize LCD
0429 D2AF       142       setb EA
042B 22         143            ret
042C            144   
042C            145   ;---------------------------------;
042C            146   ; Main program loop               ;
042C            147   ;---------------------------------;
042C            148   MyProgram:
042C            149       ; Initialize the hardware:
042C 75817F     150       mov SP, #7FH
042F 120423     151       lcall Initialize_All
0432 D280       152       setb P0.0 ; Pin is used as input
0434            153       
0434 754300     154       mov p1Score, #0x00
0437 754600     155       mov p2Score, #0x00
043A            156       
043A C0E0       157            push acc
043C 7401       157            mov a, #1
043E 14         157            dec a
043F 120355     157            lcall ?Set_Cursor_1 ; Select column and row
0442 D0E0       157            pop acc
0444 C083       158            push dph
0446 C082       158            push dpl
0448 C0E0       158            push acc
044A 900370     158            mov dptr, #Initial_Message
044D 120348     158            lcall ?Send_Constant_String
0450 D0E0       158            pop acc
0452 D082       158            pop dpl
0454 D083       158            pop dph
0456            159       
0456 1203EE     160       lcall Timer0_Init
0459 1203D3     161       lcall InitTimer2
045C            162       
045C            163   forever:
045C            164       ; synchronize with rising edge of the signal applied to pin P0.0
045C C2CA       165       clr TR2 ; Stop timer 2
045E 75CC00     166       mov TL2, #0
0461 75CD00     167       mov TH2, #0
0464 753D00     168       mov T2ov+0, #0
0467 753E00     169       mov T2ov+1, #0
046A C2CF       170       clr TF2
046C D2CA       171       setb TR2
046E            172       
046E 120734     173       lcall One_Cycle
0471            174       
0471 85CD3F     175       mov Seed+0, TH2
0474 754001     176       mov Seed+1, #0x01
0477 754187     177       mov Seed+2, #0x87
047A 85CC42     178       mov Seed+3, TL2
047D C2CA       179       clr TR2
047F            180        
047F            181   synch1:
047F E53E       182            mov a, T2ov+1
0481 54FE       183            anl a, #0xfe
0483 7034       184            jnz no_signal ; If the count is larger than 0x01ffffffff*45ns=1.16s, we assume there is no signal
0485 2080F7     185       jb P0.0, synch1
0488            186   synch2:    
0488 E53E       187            mov a, T2ov+1
048A 54FE       188            anl a, #0xfe
048C 702B       189            jnz no_signal
048E 3080F7     190       jnb P0.0, synch2
0491            191       ; Measure the period of the signal applied to pin P0.0
0491 C2CA       192       clr TR2
0493 75CC00     193       mov TL2, #0
0496 75CD00     194       mov TH2, #0
0499 753D00     195       mov T2ov+0, #0
049C 753E00     196       mov T2ov+1, #0
049F C2CF       197       clr TF2
04A1 D2CA       198       setb TR2 ; Start timer 2
04A3            199   measure1:
04A3 E53E       200            mov a, T2ov+1
04A5 54FE       201            anl a, #0xfe
04A7 7010       202            jnz no_signal 
04A9 2080F7     203       jb P0.0, measure1
04AC            204   measure2:    
04AC E53E       205            mov a, T2ov+1
04AE 54FE       206            anl a, #0xfe
04B0 7007       207            jnz no_signal
04B2 3080F7     208       jnb P0.0, measure2
04B5 C2CA       209       clr TR2 ; Stop timer 2, [T2ov+1, T2ov+0, TH2, TL2] * 45.21123ns is the period
04B7            210   
04B7 801F       211            sjmp skip_this
04B9            212   no_signal:       
04B9 C0E0       213            push acc
04BB 7401       213            mov a, #1
04BD 14         213            dec a
04BE 120353     213            lcall ?Set_Cursor_2 ; Select column and row
04C1 D0E0       213            pop acc
04C3 C083       214            push dph
04C5 C082       214            push dpl
04C7 C0E0       214            push acc
04C9 90037F     214            mov dptr, #Overflow_Str
04CC 120348     214            lcall ?Send_Constant_String
04CF D0E0       214            pop acc
04D1 D082       214            pop dpl
04D3 D083       214            pop dph
04D5 02045C     215       ljmp forever ; Repeat! 
04D8            216   skip_this:
04D8            217   
04D8            218            ; Make sure [T2ov+1, T2ov+2, TH2, TL2]!=0
04D8 E5CC       219            mov a, TL2
04DA 45CD       220            orl a, TH2
04DC 453D       221            orl a, T2ov+0
04DE 453E       222            orl a, T2ov+1
04E0 60D7       223            jz no_signal
04E2            224            ; Using integer math, convert the period to frequency:
04E2 85CC30     225            mov x+0, TL2
04E5 85CD31     226            mov x+1, TH2
04E8 853D32     227            mov x+2, T2ov+0
04EB 853E33     228            mov x+3, T2ov+1
04EE 75342D     229            mov y+0, #low (45 % 0x10000) 
04F1 753500     229            mov y+1, #high(45 % 0x10000) 
04F4 753600     229            mov y+2, #low (45 / 0x10000) 
04F7 753700     229            mov y+3, #high(45 / 0x10000)  ; One clock pulse is 1/22.1184MHz=45.21123ns
04FA 1201A8     230            lcall mul32
04FD 753464     231            mov y+0, #low (100 % 0x10000) 
0500 753500     231            mov y+1, #high(100 % 0x10000) 
0503 753600     231            mov y+2, #low (100 / 0x10000) 
0506 753700     231            mov y+3, #high(100 / 0x10000)  ;mult by 1.44 by mult 144/100
0509 120235     232            lcall div32
050C 753490     233            mov y+0, #low (144 % 0x10000) 
050F 753500     233            mov y+1, #high(144 % 0x10000) 
0512 753600     233            mov y+2, #low (144 / 0x10000) 
0515 753700     233            mov y+3, #high(144 / 0x10000)   
0518 1201A8     234            lcall mul32
051B 7534B0     235            mov y+0, #low (1200 % 0x10000) 
051E 753504     235            mov y+1, #high(1200 % 0x10000) 
0521 753600     235            mov y+2, #low (1200 / 0x10000) 
0524 753700     235            mov y+3, #high(1200 / 0x10000)  ;since i used 2 1k resistors
0527 120235     236            lcall div32
052A            237   
052A            238            ;comparing capacitance with 200 nF
052A            239            ;Set_Cursor(2, 1)
052A            240            ;lcall hex2bcd
052A            241            ;lcall Display_10_digit_BCD
052A 02045C     242       ljmp forever ; Repeat! 
052D            243       
052D            244   Inc_Score:
052D 7534C8     245            mov y+0, #low (200 % 0x10000) 
0530 753500     245            mov y+1, #high(200 % 0x10000) 
0533 753600     245            mov y+2, #low (200 / 0x10000) 
0536 753700     245            mov y+3, #high(200 / 0x10000) 
0539 120152     246            lcall x_gt_y
053C            247            ;if the capacitance is greater than 200, mf will be set to 1
053C            248            
053C 300015     249            jnb mf, Bridge_Forever
053F 0543       250            inc p1Score
0541 C0E0       251            push acc
0543 7401       251            mov a, #1
0545 14         251            dec a
0546 120353     251            lcall ?Set_Cursor_2 ; Select column and row
0549 D0E0       251            pop acc
054B 12002E     252            lcall hex2bcd
054E 1203A5     253            lcall Display_10_digit_BCD
0551            254            
0551 02045C     255            ljmp forever            
0554            256   
0554            257   Bridge_Forever:
0554 02045C     258            ljmp forever
0557            259            
0557            260   ; pseudocode:
0557            261   ;        if P1 capacitance > 50 (Can replace this number), increment P1
0557            262   ;   if P2 capacitance > 50 , increment P2
0557            263   ;        lcall compareScores
0557            264   ;        ret
0557            265   
0557            266   Dec_Score:
0557 7534C8     267            mov y+0, #low (200 % 0x10000) 
055A 753500     267            mov y+1, #high(200 % 0x10000) 
055D 753600     267            mov y+2, #low (200 / 0x10000) 
0560 753700     267            mov y+3, #high(200 / 0x10000) 
0563 120152     268            lcall x_gt_y
0566            269            ;if the capacitance is greater than 200, mf will be set to 1
0566            270            
0566 3000EB     271            jnb mf, Bridge_Forever
0569 1543       272            dec p1Score
056B C0E0       273            push acc
056D 7401       273            mov a, #1
056F 14         273            dec a
0570 120353     273            lcall ?Set_Cursor_2 ; Select column and row
0573 D0E0       273            pop acc
0575 12002E     274            lcall hex2bcd
0578 1203A5     275            lcall Display_10_digit_BCD
057B            276            
057B 02045C     277            ljmp forever
057E            278   ; pseudocode:
057E            279   ;        if P1 capacitance > 50 (Can replace this number), decrement P1
057E            280   ;   if P2 capacitance > 50 , decrement P2
057E            281   ;        ret    
057E            282   
057E            283   Random: 
057E            284            ; Dont worry about this, it is just some math that is good enough to randomize numbers enough for our purposes
057E 853F30     285       mov x+0, Seed+0
0581 854031     286       mov x+1, Seed+1
0584 854132     287       mov x+2, Seed+2
0587 854233     288       mov x+3, Seed+3
058A 7534FD     289            mov y+0, #low (214013 % 0x10000) 
058D 753543     289            mov y+1, #high(214013 % 0x10000) 
0590 753603     289            mov y+2, #low (214013 / 0x10000) 
0593 753700     289            mov y+3, #high(214013 / 0x10000) 
0596 1201A8     290       lcall mul32
0599 7534C3     291            mov y+0, #low (2531011 % 0x10000) 
059C 75359E     291            mov y+1, #high(2531011 % 0x10000) 
059F 753626     291            mov y+2, #low (2531011 / 0x10000) 
05A2 753700     291            mov y+3, #high(2531011 / 0x10000) 
05A5 1200F3     292       lcall add32
05A8 85303F     293       mov Seed+0, x+0
05AB 853140     294       mov Seed+1, x+1
05AE 853241     295       mov Seed+2, x+2
05B1 853342     296       mov Seed+3, x+3
05B4 22         297       ret
05B5            298       
05B5            299   Wait_Random_Time:
05B5 C002       300            push AR2
05B7 AA3F       300            mov R2, Seed+0
05B9 1202CF     300            lcall ?Wait_Milli_Seconds
05BC D002       300            pop AR2
05BE 120557     301            lcall Dec_Score
05C1 C002       302            push AR2
05C3 AA40       302            mov R2, Seed+1
05C5 1202CF     302            lcall ?Wait_Milli_Seconds
05C8 D002       302            pop AR2
05CA            303       ;Inc_Score ... so on in between each random wait time
05CA 120557     304       lcall Dec_Score
05CD C002       305            push AR2
05CF AA41       305            mov R2, Seed+2
05D1 1202CF     305            lcall ?Wait_Milli_Seconds
05D4 D002       305            pop AR2
05D6 120557     306       lcall Dec_Score
05D9 C002       307            push AR2
05DB AA42       307            mov R2, Seed+3
05DD 1202CF     307            lcall ?Wait_Milli_Seconds
05E0 D002       307            pop AR2
05E2 120557     308       lcall Dec_Score
05E5 C002       309            push AR2
05E7 AA3F       309            mov R2, Seed+0
05E9 1202CF     309            lcall ?Wait_Milli_Seconds
05EC D002       309            pop AR2
05EE 120557     310       lcall Dec_Score
05F1 C002       311            push AR2
05F3 AA40       311            mov R2, Seed+1
05F5 1202CF     311            lcall ?Wait_Milli_Seconds
05F8 D002       311            pop AR2
05FA 120557     312       lcall Dec_Score
05FD C002       313            push AR2
05FF AA41       313            mov R2, Seed+2
0601 1202CF     313            lcall ?Wait_Milli_Seconds
0604 D002       313            pop AR2
0606 120557     314       lcall Dec_Score
0609 C002       315            push AR2
060B AA42       315            mov R2, Seed+3
060D 1202CF     315            lcall ?Wait_Milli_Seconds
0610 D002       315            pop AR2
0612 120557     316       lcall Dec_Score
0615 C002       317            push AR2
0617 AA3F       317            mov R2, Seed+0
0619 1202CF     317            lcall ?Wait_Milli_Seconds
061C D002       317            pop AR2
061E 120557     318       lcall Dec_Score
0621 C002       319            push AR2
0623 AA40       319            mov R2, Seed+1
0625 1202CF     319            lcall ?Wait_Milli_Seconds
0628 D002       319            pop AR2
062A 120557     320       lcall Dec_Score
062D C002       321            push AR2
062F AA41       321            mov R2, Seed+2
0631 1202CF     321            lcall ?Wait_Milli_Seconds
0634 D002       321            pop AR2
0636 120557     322       lcall Dec_Score
0639 C002       323            push AR2
063B AA42       323            mov R2, Seed+3
063D 1202CF     323            lcall ?Wait_Milli_Seconds
0640 D002       323            pop AR2
0642 120557     324       lcall Dec_Score
0645 C002       325            push AR2
0647 AA3F       325            mov R2, Seed+0
0649 1202CF     325            lcall ?Wait_Milli_Seconds
064C D002       325            pop AR2
064E 120557     326            lcall Dec_Score
0651 C002       327            push AR2
0653 AA40       327            mov R2, Seed+1
0655 1202CF     327            lcall ?Wait_Milli_Seconds
0658 D002       327            pop AR2
065A            328       ;Inc_Score ... so on in between each random wait time
065A 120557     329       lcall Dec_Score
065D C002       330            push AR2
065F AA41       330            mov R2, Seed+2
0661 1202CF     330            lcall ?Wait_Milli_Seconds
0664 D002       330            pop AR2
0666 120557     331       lcall Dec_Score
0669 C002       332            push AR2
066B AA42       332            mov R2, Seed+3
066D 1202CF     332            lcall ?Wait_Milli_Seconds
0670 D002       332            pop AR2
0672 120557     333       lcall Dec_Score
0675 C002       334            push AR2
0677 AA3F       334            mov R2, Seed+0
0679 1202CF     334            lcall ?Wait_Milli_Seconds
067C D002       334            pop AR2
067E 120557     335            lcall Dec_Score
0681 C002       336            push AR2
0683 AA40       336            mov R2, Seed+1
0685 1202CF     336            lcall ?Wait_Milli_Seconds
0688 D002       336            pop AR2
068A            337       ;Inc_Score ... so on in between each random wait time
068A 120557     338       lcall Dec_Score
068D C002       339            push AR2
068F AA41       339            mov R2, Seed+2
0691 1202CF     339            lcall ?Wait_Milli_Seconds
0694 D002       339            pop AR2
0696 120557     340       lcall Dec_Score
0699 C002       341            push AR2
069B AA42       341            mov R2, Seed+3
069D 1202CF     341            lcall ?Wait_Milli_Seconds
06A0 D002       341            pop AR2
06A2 120557     342       lcall Dec_Score
06A5 C002       343            push AR2
06A7 AA3F       343            mov R2, Seed+0
06A9 1202CF     343            lcall ?Wait_Milli_Seconds
06AC D002       343            pop AR2
06AE 120557     344            lcall Dec_Score
06B1 C002       345            push AR2
06B3 AA40       345            mov R2, Seed+1
06B5 1202CF     345            lcall ?Wait_Milli_Seconds
06B8 D002       345            pop AR2
06BA            346       ;Inc_Score ... so on in between each random wait time
06BA 120557     347       lcall Dec_Score
06BD C002       348            push AR2
06BF AA41       348            mov R2, Seed+2
06C1 1202CF     348            lcall ?Wait_Milli_Seconds
06C4 D002       348            pop AR2
06C6 120557     349       lcall Dec_Score
06C9 C002       350            push AR2
06CB AA42       350            mov R2, Seed+3
06CD 1202CF     350            lcall ?Wait_Milli_Seconds
06D0 D002       350            pop AR2
06D2 120557     351       lcall Dec_Score
06D5 22         352       ret    
06D6            353       
06D6            354   Wait_Constant_Time:
06D6 C002       355            push AR2
06D8 7AFF       355            mov R2, #255
06DA 1202CF     355            lcall ?Wait_Milli_Seconds
06DD D002       355            pop AR2
06DF 12052D     356            lcall Inc_Score
06E2 C002       357            push AR2
06E4 7AFF       357            mov R2, #255
06E6 1202CF     357            lcall ?Wait_Milli_Seconds
06E9 D002       357            pop AR2
06EB 12052D     358       lcall Inc_Score
06EE C002       359            push AR2
06F0 7AFF       359            mov R2, #255
06F2 1202CF     359            lcall ?Wait_Milli_Seconds
06F5 D002       359            pop AR2
06F7 12052D     360       lcall Inc_Score
06FA C002       361            push AR2
06FC 7AFF       361            mov R2, #255
06FE 1202CF     361            lcall ?Wait_Milli_Seconds
0701 D002       361            pop AR2
0703 12052D     362       lcall Inc_Score
0706 C002       363            push AR2
0708 7AFF       363            mov R2, #255
070A 1202CF     363            lcall ?Wait_Milli_Seconds
070D D002       363            pop AR2
070F 12052D     364       lcall Inc_Score
0712 C002       365            push AR2
0714 7AFF       365            mov R2, #255
0716 1202CF     365            lcall ?Wait_Milli_Seconds
0719 D002       365            pop AR2
071B 12052D     366       lcall Inc_Score
071E C002       367            push AR2
0720 7AFF       367            mov R2, #255
0722 1202CF     367            lcall ?Wait_Milli_Seconds
0725 D002       367            pop AR2
0727 12052D     368       lcall Inc_Score
072A C002       369            push AR2
072C 7AFF       369            mov R2, #255
072E 1202CF     369            lcall ?Wait_Milli_Seconds
0731 D002       369            pop AR2
0733 22         370       ret
0734            371       
0734            372   One_Cycle:
0734 1205B5     373            lcall Wait_Random_Time ; in here, we are continuously checking if someone slaps, if they do, we decrement
0737 120407     374       lcall Timer0_HIGH_Init
073A            375       ;Wait for slap, if slapped, increment score
073A 1206D6     376       lcall Wait_Constant_Time ; in here, we are continuously checking if someone slaps, if they do we increment
073D 1203EE     377       lcall Timer0_Init
0740            378       ;Wait for slap, if slapped, decrement score
0740 22         379       ret
0741            380       
0741            381   Compare_Scores:
0741            382   ;   if p1Score == 5 , ljmp P1_Wins
0741            383            
0741            384   ;        if p2Score == 5 , ljmp P2_Wins
0741            385   ;                
0741            386   
0741            387   P1_Wins:
0741            388   ; Display some sort of message
0741            389   
0741            390   P2_Wins:
0741            391   ; display some sort of message
0741            392   ;
0741            393   Play_Music:
0741            394   
0741            395   
0741            396   
0741            397   end
