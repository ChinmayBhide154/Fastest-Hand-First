                  2   $LIST
0000              4   
0000              5   org 0000H
0000 0203EE       6      ljmp MyProgram
0003              7   
0003              8   ; Timer/Counter 0 overflow interrupt vector
000B              9   org 0x000B
000B 020399      10            ljmp Timer0_ISR   
000E             11   ; Timer/Counter 2 overflow interrupt vector
002B             12   org 0x002B
002B 0203D6      13            ljmp Timer2_ISR
002E             14   
002E             15   ; These register definitions needed by 'math32.inc'
0030             16   DSEG at 30H
0030             17   x:   ds 4
0034             18   y:   ds 4
0038             19   bcd: ds 5
003D             20   T2ov: ds 2 ; 16-bit timer 2 overflow (to measure the period of very slow signals)
003F             21   Seed: ds 4
0043             22   
0000             23   BSEG
0000             24   mf: dbit 1
0001             25   
                570   $LIST
                 27   $LIST
02C4             29   
02C4             30   
02C4             31   CLK           EQU 22118400 ; Microcontroller system crystal frequency in Hz
02C4             32   TIMER0_RATE   EQU 4096     ; 2048Hz squarewave (peak amplitude of CEM-1203 speaker)
02C4             33   TIMER0_RELOAD EQU ((65536-(CLK/TIMER0_RATE)))
02C4             34   TIMER2_RATE   EQU 1000     ; 1000Hz, for a timer tick of 1ms
02C4             35   TIMER2_RELOAD EQU ((65536-(CLK/TIMER2_RATE)))
02C4             36   
02C4             37   cseg
02C4             38   ; These 'equ' must match the hardware wiring
02C4             39   LCD_RS equ P3.2
02C4             40   ;LCD_RW equ PX.X ; Not used in this code, connect the pin to GND
02C4             41   LCD_E  equ P3.3
02C4             42   LCD_D4 equ P3.4
02C4             43   LCD_D5 equ P3.5
02C4             44   LCD_D6 equ P3.6
02C4             45   LCD_D7 equ P3.7
02C4             46   SOUND_OUT equ P1.1
02C4             47   
                 49   	$LIST
0370             51   
0370             52   ;                     1234567890123456    <- This helps determine the location of the counter
0370 52616E64    53   Initial_Message:  db 'Random Numbers', 0
     6F6D204E
     756D6265
     727300
037F 00          54   No_Signal_Str:    db '', 0
0380             55   
0380             56   Timer0_Init:
0380 E589        57            mov a, TMOD
0382 54F0        58            anl a, #0xf0 ; Clear the bits for timer 0
0384 4401        59            orl a, #0x01 ; Configure timer 0 as 16-timer
0386 F589        60            mov TMOD, a
0388 758CEA      61            mov TH0, #high(TIMER0_RELOAD)
038B 758AE8      62            mov TL0, #low(TIMER0_RELOAD)
038E             63            ; Set autoreload value
038E 75F4EA      64            mov RH0, #high(TIMER0_RELOAD)
0391 75F2E8      65            mov RL0, #low(TIMER0_RELOAD)
0394             66            ; Enable the timer and interrupts
0394 D2A9        67       setb ET0  ; Enable timer 0 interrupt
0396 D28C        68       setb TR0  ; Start timer 0
0398 22          69            ret
0399             70            
0399             71   Timer0_ISR:
0399             72            ;clr TF0  ; According to the data sheet this is done for us already.
0399 B291        73            cpl SOUND_OUT ; Connect speaker to P1.1!
039B 32          74            reti
039C             75   
039C             76   ; Sends 10-digit BCD number in bcd to the LCD
039C             77   Display_10_digit_BCD:
039C C000        78            push ar0
039E A83C        78            mov r0, bcd+4
03A0 12035A      78            lcall ?Display_BCD
03A3 D000        78            pop ar0
03A5 C000        79            push ar0
03A7 A83B        79            mov r0, bcd+3
03A9 12035A      79            lcall ?Display_BCD
03AC D000        79            pop ar0
03AE C000        80            push ar0
03B0 A83A        80            mov r0, bcd+2
03B2 12035A      80            lcall ?Display_BCD
03B5 D000        80            pop ar0
03B7 C000        81            push ar0
03B9 A839        81            mov r0, bcd+1
03BB 12035A      81            lcall ?Display_BCD
03BE D000        81            pop ar0
03C0 C000        82            push ar0
03C2 A838        82            mov r0, bcd+0
03C4 12035A      82            lcall ?Display_BCD
03C7 D000        82            pop ar0
03C9 22          83            ret
03CA             84   
03CA             85   ;Initializes timer/counter 2 as a 16-bit timer
03CA             86   InitTimer2:
03CA 75C800      87            mov T2CON, #0 ; Stop timer/counter.  Set as timer (clock input is pin 22.1184MHz).
03CD             88            ; Set the reload value on overflow to zero (just in case is not zero)
03CD 75CB00      89            mov RCAP2H, #0
03D0 75CA00      90            mov RCAP2L, #0
03D3 D2AD        91            setb ET2
03D5 22          92       ret
03D6             93   
03D6             94   Timer2_ISR:
03D6 C2CF        95            clr TF2  ; Timer 2 doesn't clear TF2 automatically. Do it in ISR
03D8 C0E0        96            push acc
03DA 053D        97            inc T2ov+0
03DC E53D        98            mov a, T2ov+0
03DE 7002        99            jnz Timer2_ISR_done
03E0 053E       100            inc T2ov+1
03E2            101   Timer2_ISR_done:
03E2 D0E0       102            pop acc
03E4 32         103            reti
03E5            104   
03E5            105   ;---------------------------------;
03E5            106   ; Hardware initialization         ;
03E5            107   ;---------------------------------;
03E5            108   Initialize_All:
03E5 1203CA     109       lcall InitTimer2
03E8 12031E     110       lcall LCD_4BIT ; Initialize LCD
03EB D2AF       111       setb EA
03ED 22         112            ret
03EE            113   
03EE            114   ;---------------------------------;
03EE            115   ; Main program loop               ;
03EE            116   ;---------------------------------;
03EE            117   MyProgram:
03EE            118       ; Initialize the hardware:
03EE 75817F     119       mov SP, #7FH
03F1 1203E5     120       lcall Initialize_All
03F4 D280       121       setb P0.0 ; Pin is used as input
03F6            122   
03F6 C0E0       123            push acc
03F8 7401       123            mov a, #1
03FA 14         123            dec a
03FB 120355     123            lcall ?Set_Cursor_1 ; Select column and row
03FE D0E0       123            pop acc
0400 C083       124            push dph
0402 C082       124            push dpl
0404 C0E0       124            push acc
0406 900370     124            mov dptr, #Initial_Message
0409 120348     124            lcall ?Send_Constant_String
040C D0E0       124            pop acc
040E D082       124            pop dpl
0410 D083       124            pop dph
0412            125       
0412 1204E7     126       lcall Random
0415 C002       127            push AR2
0417 AA3F       127            mov R2, Seed+0
0419 1202CF     127            lcall ?Wait_Milli_Seconds
041C D002       127            pop AR2
041E C002       128            push AR2
0420 AA40       128            mov R2, Seed+1
0422 1202CF     128            lcall ?Wait_Milli_Seconds
0425 D002       128            pop AR2
0427 C002       129            push AR2
0429 AA41       129            mov R2, Seed+2
042B 1202CF     129            lcall ?Wait_Milli_Seconds
042E D002       129            pop AR2
0430 C002       130            push AR2
0432 AA42       130            mov R2, Seed+3
0434 1202CF     130            lcall ?Wait_Milli_Seconds
0437 D002       130            pop AR2
0439            131       
0439            132   
0439            133   
0439            134            
0439            135   Bridge_Random:
0439 0204E7     136            ljmp Random
043C            137       
043C            138   forever:
043C            139       ; synchronize with rising edge of the signal applied to pin P0.0
043C            140       ;ljmp Wait
043C            141       
043C C2CA       142       clr TR2 ; Stop timer 2
043E 75CC00     143       mov TL2, #0
0441 75CD00     144       mov TH2, #0
0444 753D00     145       mov T2ov+0, #0
0447 753E00     146       mov T2ov+1, #0
044A C2CF       147       clr TF2
044C D2CA       148       setb TR2
044E            149       
044E            150       ;Randomize button connected at P2.4
044E 20A4FD     151       jb P2.4, $
0451            152       
0451 85CD3F     153       mov Seed+0, TH2
0454 754001     154       mov Seed+1, #0x01
0457 754187     155       mov Seed+2, #0x87
045A 85CC42     156       mov Seed+3, TL2
045D C2CA       157       clr TR2
045F            158       
045F 30A4D7     159       jnb P2.4, Bridge_Random
0462 02043C     160       ljmp forever
0465            161       
0465            162   synch1:
0465 E53E       163            mov a, T2ov+1
0467 54FE       164            anl a, #0xfe
0469 7034       165            jnz no_signal ; If the count is larger than 0x01ffffffff*45ns=1.16s, we assume there is no signal
046B 2080F7     166       jb P0.0, synch1
046E            167   synch2:    
046E E53E       168            mov a, T2ov+1
0470 54FE       169            anl a, #0xfe
0472 702B       170            jnz no_signal
0474 3080F7     171       jnb P0.0, synch2
0477            172       
0477            173       ; Measure the period of the signal applied to pin P0.0
0477 C2CA       174       clr TR2
0479 75CC00     175       mov TL2, #0
047C 75CD00     176       mov TH2, #0
047F 753D00     177       mov T2ov+0, #0
0482 753E00     178       mov T2ov+1, #0
0485 C2CF       179       clr TF2
0487 D2CA       180       setb TR2 ; Start timer 2
0489            181   measure1:
0489 E53E       182            mov a, T2ov+1
048B 54FE       183            anl a, #0xfe
048D 7010       184            jnz no_signal 
048F 2080F7     185       jb P0.0, measure1
0492            186   measure2:    
0492 E53E       187            mov a, T2ov+1
0494 54FE       188            anl a, #0xfe
0496 7007       189            jnz no_signal
0498 3080F7     190       jnb P0.0, measure2
049B C2CA       191       clr TR2 ; Stop timer 2, [T2ov+1, T2ov+0, TH2, TL2] * 45.21123ns is the period
049D            192   
049D 801F       193            sjmp skip_this
049F            194   no_signal:       
049F C0E0       195            push acc
04A1 7401       195            mov a, #1
04A3 14         195            dec a
04A4 120353     195            lcall ?Set_Cursor_2 ; Select column and row
04A7 D0E0       195            pop acc
04A9 C083       196            push dph
04AB C082       196            push dpl
04AD C0E0       196            push acc
04AF 90037F     196            mov dptr, #No_Signal_Str
04B2 120348     196            lcall ?Send_Constant_String
04B5 D0E0       196            pop acc
04B7 D082       196            pop dpl
04B9 D083       196            pop dph
04BB 02043C     197       ljmp forever ; Repeat! 
04BE            198   skip_this:
04BE            199   
04BE            200            ; Make sure [T2ov+1, T2ov+2, TH2, TL2]!=0
04BE E5CC       201            mov a, TL2
04C0 45CD       202            orl a, TH2
04C2 453D       203            orl a, T2ov+0
04C4 453E       204            orl a, T2ov+1
04C6 60D7       205            jz no_signal
04C8            206            ; Using integer math, convert the period to frequency:
04C8 85CC30     207            mov x+0, TL2
04CB 85CD31     208            mov x+1, TH2
04CE 853D32     209            mov x+2, T2ov+0
04D1 853E33     210            mov x+3, T2ov+1
04D4            211            
04D4            212            
04D4            213            ; Convert the result to BCD and display on LCD
04D4 C0E0       214            push acc
04D6 7401       214            mov a, #1
04D8 14         214            dec a
04D9 120353     214            lcall ?Set_Cursor_2 ; Select column and row
04DC D0E0       214            pop acc
04DE 12002E     215            lcall hex2bcd
04E1 12039C     216            lcall Display_10_digit_BCD
04E4 02043C     217       ljmp forever ; Repeat! 
04E7            218   
04E7            219   
04E7            220   ;Generates random number
04E7            221   Random: 
04E7            222            ; Dont worry about this, it is just some math that is good enough to randomize numbers enough for our purposes
04E7 853F30     223       mov x+0, Seed+0
04EA 854031     224       mov x+1, Seed+1
04ED 854132     225       mov x+2, Seed+2
04F0 854233     226       mov x+3, Seed+3
04F3 7534FD     227            mov y+0, #low (214013 % 0x10000) 
04F6 753543     227            mov y+1, #high(214013 % 0x10000) 
04F9 753603     227            mov y+2, #low (214013 / 0x10000) 
04FC 753700     227            mov y+3, #high(214013 / 0x10000) 
04FF 1201A8     228       lcall mul32
0502 7534C3     229            mov y+0, #low (2531011 % 0x10000) 
0505 75359E     229            mov y+1, #high(2531011 % 0x10000) 
0508 753626     229            mov y+2, #low (2531011 / 0x10000) 
050B 753700     229            mov y+3, #high(2531011 / 0x10000) 
050E 1200F3     230       lcall add32
0511 85303F     231       mov Seed+0, x+0
0514 853140     232       mov Seed+1, x+1
0517 853241     233       mov Seed+2, x+2
051A 853342     234       mov Seed+3, x+3
051D            235       
051D C0E0       236            push acc
051F 7401       236            mov a, #1
0521 14         236            dec a
0522 120353     236            lcall ?Set_Cursor_2 ; Select column and row
0525 D0E0       236            pop acc
0527 12002E     237            lcall hex2bcd
052A 12039C     238            lcall Display_10_digit_BCD
052D 120399     239            lcall Timer0_ISR
0530 22         240       ret
0531            241       
0531            242      
0531            243       
0531            244   
0531            245   en
