                  2   $LIST
0000              4   
0000              5   org 0000H
0000 02042C       6      ljmp MyProgram
0003              7      
000B              8   org 0x000B
000B 020420       9            ljmp Timer0_ISR
000E             10   ; Timer/Counter 2 overflow interrupt vector
002B             11   org 0x002B
002B 0203DF      12            ljmp Timer2_ISR
002E             13   
002E             14   ; These register definitions needed by 'math32.inc'
0030             15   DSEG at 30H
0030             16   x:   ds 4
0034             17   y:   ds 4
0038             18   bcd: ds 5
003D             19   T2ov: ds 2 ; 16-bit timer 2 overflow (to measure the period of very slow signals)
003F             20   Seed: ds 4
0043             21   p1Score: ds 3
0046             22   p2Score: ds 3
0049             23   
0000             24   BSEG
0000             25   mf: dbit 1
0001             26   
                570   $LIST
                 28   $LIST
02C4             30   
02C4             31   cseg
02C4             32   ; These 'equ' must match the hardware wiring
02C4             33   LCD_RS equ P3.2
02C4             34   ;LCD_RW equ PX.X ; Not used in this code, connect the pin to GND
02C4             35   LCD_E  equ P3.3
02C4             36   LCD_D4 equ P3.4
02C4             37   LCD_D5 equ P3.5
02C4             38   LCD_D6 equ P3.6
02C4             39   LCD_D7 equ P3.7
02C4             40   
                 42   	$LIST
0370             44   
0370             45   CLK           EQU 22118400 ; Microcontroller system crystal frequency in Hz
0370             46   TIMER0_RATE   EQU 1000     ; 2048Hz squarewave (peak amplitude of CEM-1203 speaker)
0370             47   TIMER0_RATE_HIGH EQU 4096
0370             48   TIMER0_RATE_LOW EQU 1000
0370             49   TIMER0_RELOAD EQU ((65536-(CLK/TIMER0_RATE)))
0370             50   TIMER0_RELOAD_HIGH EQU ((65536-(CLK/TIMER0_RATE_HIGH)))
0370             51   TIMER2_RATE   EQU 1000     ; 1000Hz, for a timer tick of 1ms
0370             52   ;Timer0_Rate used to change pitch
0370             53   TIMER2_RELOAD EQU ((65536-(CLK/TIMER2_RATE)))
0370             54   
0370             55   ;Music Frequencies
0370             56   TIMER0_RATE_A   EQU 440 
0370             57   
0370             58   
0370             59   cseg
0370             60   
0370             61   SOUND_OUT equ P1.1
0370             62   
0370             63   
0370             64   ;                     1234567890123456    <- This helps determine the location of the counter
0370 50312020    65   Initial_Message:  db 'P1          P2', 0
     20202020
     20202020
     503200
037F 30302020    66   Overflow_Str:    db '00           00', 0
     20202020
     20202020
     20303000
038F 506C6179    67   Player_One_Text: db 'Player 1: ', 0
     65722031
     3A2000
039A 506C6179    68   Player_Two_Text: db 'Player 2: ',0
     65722032
     3A2000
03A5             69   
03A5             70   
03A5             71   ; Sends 10-digit BCD number in bcd to the LCD
03A5             72   Display_10_digit_BCD:
03A5 C000        73            push ar0
03A7 A83C        73            mov r0, bcd+4
03A9 12035A      73            lcall ?Display_BCD
03AC D000        73            pop ar0
03AE C000        74            push ar0
03B0 A83B        74            mov r0, bcd+3
03B2 12035A      74            lcall ?Display_BCD
03B5 D000        74            pop ar0
03B7 C000        75            push ar0
03B9 A83A        75            mov r0, bcd+2
03BB 12035A      75            lcall ?Display_BCD
03BE D000        75            pop ar0
03C0 C000        76            push ar0
03C2 A839        76            mov r0, bcd+1
03C4 12035A      76            lcall ?Display_BCD
03C7 D000        76            pop ar0
03C9 C000        77            push ar0
03CB A838        77            mov r0, bcd+0
03CD 12035A      77            lcall ?Display_BCD
03D0 D000        77            pop ar0
03D2 22          78            ret
03D3             79   
03D3             80   ;Initializes timer/counter 2 as a 16-bit timer
03D3             81   InitTimer2:
03D3 75C800      82            mov T2CON, #0 ; Stop timer/counter.  Set as timer (clock input is pin 22.1184MHz).
03D6             83            ; Set the reload value on overflow to zero (just in case is not zero)
03D6 75CB00      84            mov RCAP2H, #0
03D9 75CA00      85            mov RCAP2L, #0
03DC D2AD        86            setb ET2
03DE 22          87       ret
03DF             88   
03DF             89   Timer2_ISR:
03DF C2CF        90            clr TF2  ; Timer 2 doesn't clear TF2 automatically. Do it in ISR
03E1 C0E0        91            push acc
03E3 053D        92            inc T2ov+0
03E5 E53D        93            mov a, T2ov+0
03E7 7002        94            jnz Timer2_ISR_done
03E9 053E        95            inc T2ov+1
03EB             96   Timer2_ISR_done:
03EB D0E0        97            pop acc
03ED 32          98            reti
03EE             99   
03EE            100   Timer0_Init:
03EE E589       101            mov a, TMOD
03F0 54F0       102            anl a, #0xf0 ; Clear the bits for timer 0
03F2 4401       103            orl a, #0x01 ; Configure timer 0 as 16-timer
03F4 F589       104            mov TMOD, a
03F6 758CA9     105            mov TH0, #high(TIMER0_RELOAD)
03F9 758A9A     106            mov TL0, #low(TIMER0_RELOAD)
03FC            107            ; Set autoreload value
03FC 75F4A9     108            mov RH0, #high(TIMER0_RELOAD)
03FF 75F29A     109            mov RL0, #low(TIMER0_RELOAD)
0402            110            ; Enable the timer and interrupts
0402 D2A9       111       setb ET0  ; Enable timer 0 interrupt
0404 D28C       112       setb TR0  ; Start timer 0
0406 22         113            ret
0407            114            
0407            115   Timer0_HIGH_Init:
0407 E589       116            mov a, TMOD
0409 54F0       117            anl a, #0xf0 ; Clear the bits for timer 0
040B 4401       118            orl a, #0x01 ; Configure timer 0 as 16-timer
040D F589       119            mov TMOD, a
040F 758CEA     120            mov TH0, #high(TIMER0_RELOAD_HIGH)
0412 758AE8     121            mov TL0, #low(TIMER0_RELOAD_HIGH)
0415            122            ; Set autoreload value
0415 75F4EA     123            mov RH0, #high(TIMER0_RELOAD_HIGH)
0418 75F2E8     124            mov RL0, #low(TIMER0_RELOAD_HIGH)
041B            125            ; Enable the timer and interrupts
041B D2A9       126       setb ET0  ; Enable timer 0 interrupt
041D D28C       127       setb TR0  ; Start timer 0
041F 22         128            ret
0420            129   Timer0_ISR:
0420            130            ;clr TF0  ; According to the data sheet this is done for us already.
0420 B291       131            cpl SOUND_OUT ; Connect speaker to P1.1!
0422 32         132            reti
0423            133   
0423            134   ;---------------------------------;
0423            135   ; Hardware initialization         ;
0423            136   ;---------------------------------;
0423            137   Initialize_All:
0423 1203D3     138       lcall InitTimer2
0426 12031E     139       lcall LCD_4BIT ; Initialize LCD
0429 D2AF       140       setb EA
042B 22         141            ret
042C            142   
042C            143   ;---------------------------------;
042C            144   ; Main program loop               ;
042C            145   ;---------------------------------;
042C            146   MyProgram:
042C            147       ; Initialize the hardware:
042C 75817F     148       mov SP, #7FH
042F 120423     149       lcall Initialize_All
0432 D280       150       setb P0.0 ; Pin is used as input
0434 C0E0       151            push acc
0436 7401       151            mov a, #1
0438 14         151            dec a
0439 120355     151            lcall ?Set_Cursor_1 ; Select column and row
043C D0E0       151            pop acc
043E C083       152            push dph
0440 C082       152            push dpl
0442 C0E0       152            push acc
0444 900370     152            mov dptr, #Initial_Message
0447 120348     152            lcall ?Send_Constant_String
044A D0E0       152            pop acc
044C D082       152            pop dpl
044E D083       152            pop dph
0450            153       
0450 1203EE     154       lcall Timer0_Init
0453 1203D3     155       lcall InitTimer2
0456            156   
0456            157       
0456            158   forever:
0456            159       ; synchronize with rising edge of the signal applied to pin P0.0
0456 C2CA       160       clr TR2 ; Stop timer 2
0458 75CC00     161       mov TL2, #0
045B 75CD00     162       mov TH2, #0
045E 753D00     163       mov T2ov+0, #0
0461 753E00     164       mov T2ov+1, #0
0464 C2CF       165       clr TF2
0466 D2CA       166       setb TR2
0468            167       
0468 1206D8     168       lcall One_Cycle
046B            169       
046B 85CD3F     170       mov Seed+0, TH2
046E 754001     171       mov Seed+1, #0x01
0471 754187     172       mov Seed+2, #0x87
0474 85CC42     173       mov Seed+3, TL2
0477 C2CA       174       clr TR2
0479            175       
0479            176       
0479            177   synch1:
0479 E53E       178            mov a, T2ov+1
047B 54FE       179            anl a, #0xfe
047D 7034       180            jnz no_signal ; If the count is larger than 0x01ffffffff*45ns=1.16s, we assume there is no signal
047F 2080F7     181       jb P0.0, synch1
0482            182   synch2:    
0482 E53E       183            mov a, T2ov+1
0484 54FE       184            anl a, #0xfe
0486 702B       185            jnz no_signal
0488 3080F7     186       jnb P0.0, synch2
048B            187       ; Measure the period of the signal applied to pin P0.0
048B C2CA       188       clr TR2
048D 75CC00     189       mov TL2, #0
0490 75CD00     190       mov TH2, #0
0493 753D00     191       mov T2ov+0, #0
0496 753E00     192       mov T2ov+1, #0
0499 C2CF       193       clr TF2
049B D2CA       194       setb TR2 ; Start timer 2
049D            195   measure1:
049D E53E       196            mov a, T2ov+1
049F 54FE       197            anl a, #0xfe
04A1 7010       198            jnz no_signal 
04A3 2080F7     199       jb P0.0, measure1
04A6            200   measure2:    
04A6 E53E       201            mov a, T2ov+1
04A8 54FE       202            anl a, #0xfe
04AA 7007       203            jnz no_signal
04AC 3080F7     204       jnb P0.0, measure2
04AF C2CA       205       clr TR2 ; Stop timer 2, [T2ov+1, T2ov+0, TH2, TL2] * 45.21123ns is the period
04B1            206   
04B1 801F       207            sjmp skip_this
04B3            208   no_signal:       
04B3 C0E0       209            push acc
04B5 7401       209            mov a, #1
04B7 14         209            dec a
04B8 120353     209            lcall ?Set_Cursor_2 ; Select column and row
04BB D0E0       209            pop acc
04BD C083       210            push dph
04BF C082       210            push dpl
04C1 C0E0       210            push acc
04C3 90037F     210            mov dptr, #Overflow_Str
04C6 120348     210            lcall ?Send_Constant_String
04C9 D0E0       210            pop acc
04CB D082       210            pop dpl
04CD D083       210            pop dph
04CF 020456     211       ljmp forever ; Repeat! 
04D2            212   skip_this:
04D2            213   
04D2            214            ; Make sure [T2ov+1, T2ov+2, TH2, TL2]!=0
04D2 E5CC       215            mov a, TL2
04D4 45CD       216            orl a, TH2
04D6 453D       217            orl a, T2ov+0
04D8 453E       218            orl a, T2ov+1
04DA 60D7       219            jz no_signal
04DC            220            ; Using integer math, convert the period to frequency:
04DC 85CC30     221            mov x+0, TL2
04DF 85CD31     222            mov x+1, TH2
04E2 853D32     223            mov x+2, T2ov+0
04E5 853E33     224            mov x+3, T2ov+1
04E8 75342D     225            mov y+0, #low (45 % 0x10000) 
04EB 753500     225            mov y+1, #high(45 % 0x10000) 
04EE 753600     225            mov y+2, #low (45 / 0x10000) 
04F1 753700     225            mov y+3, #high(45 / 0x10000)  ; One clock pulse is 1/22.1184MHz=45.21123ns
04F4 1201A8     226            lcall mul32
04F7 753464     227            mov y+0, #low (100 % 0x10000) 
04FA 753500     227            mov y+1, #high(100 % 0x10000) 
04FD 753600     227            mov y+2, #low (100 / 0x10000) 
0500 753700     227            mov y+3, #high(100 / 0x10000)  ;mult by 1.44 by mult 144/100
0503 120235     228            lcall div32
0506 753490     229            mov y+0, #low (144 % 0x10000) 
0509 753500     229            mov y+1, #high(144 % 0x10000) 
050C 753600     229            mov y+2, #low (144 / 0x10000) 
050F 753700     229            mov y+3, #high(144 / 0x10000)   
0512 1201A8     230            lcall mul32
0515 7534B0     231            mov y+0, #low (1200 % 0x10000) 
0518 753504     231            mov y+1, #high(1200 % 0x10000) 
051B 753600     231            mov y+2, #low (1200 / 0x10000) 
051E 753700     231            mov y+3, #high(1200 / 0x10000)  ;since i used 2 1k resistors
0521 120235     232            lcall div32
0524            233   
0524            234            ; Convert the result to BCD and display on LCD
0524 C0E0       235            push acc
0526 7401       235            mov a, #1
0528 14         235            dec a
0529 120353     235            lcall ?Set_Cursor_2 ; Select column and row
052C D0E0       235            pop acc
052E 12002E     236            lcall hex2bcd
0531 1203A5     237            lcall Display_10_digit_BCD
0534 020456     238       ljmp forever ; Repeat! 
0537            239       
0537            240   Random: 
0537            241            ; Dont worry about this, it is just some math that is good enough to randomize numbers enough for our purposes
0537 853F30     242       mov x+0, Seed+0
053A 854031     243       mov x+1, Seed+1
053D 854132     244       mov x+2, Seed+2
0540 854233     245       mov x+3, Seed+3
0543 7534FD     246            mov y+0, #low (214013 % 0x10000) 
0546 753543     246            mov y+1, #high(214013 % 0x10000) 
0549 753603     246            mov y+2, #low (214013 / 0x10000) 
054C 753700     246            mov y+3, #high(214013 / 0x10000) 
054F 1201A8     247       lcall mul32
0552 7534C3     248            mov y+0, #low (2531011 % 0x10000) 
0555 75359E     248            mov y+1, #high(2531011 % 0x10000) 
0558 753626     248            mov y+2, #low (2531011 / 0x10000) 
055B 753700     248            mov y+3, #high(2531011 / 0x10000) 
055E 1200F3     249       lcall add32
0561 85303F     250       mov Seed+0, x+0
0564 853140     251       mov Seed+1, x+1
0567 853241     252       mov Seed+2, x+2
056A 853342     253       mov Seed+3, x+3
056D 22         254       ret
056E            255       
056E            256   Wait_Random_Time:
056E C002       257            push AR2
0570 AA3F       257            mov R2, Seed+0
0572 1202CF     257            lcall ?Wait_Milli_Seconds
0575 D002       257            pop AR2
0577            258            ;Inc_Capacitance
0577 C002       259            push AR2
0579 AA40       259            mov R2, Seed+1
057B 1202CF     259            lcall ?Wait_Milli_Seconds
057E D002       259            pop AR2
0580            260       ;Inc_Capacitance ... so on in between each random wait time
0580 C002       261            push AR2
0582 AA41       261            mov R2, Seed+2
0584 1202CF     261            lcall ?Wait_Milli_Seconds
0587 D002       261            pop AR2
0589 C002       262            push AR2
058B AA42       262            mov R2, Seed+3
058D 1202CF     262            lcall ?Wait_Milli_Seconds
0590 D002       262            pop AR2
0592 C002       263            push AR2
0594 AA3F       263            mov R2, Seed+0
0596 1202CF     263            lcall ?Wait_Milli_Seconds
0599 D002       263            pop AR2
059B C002       264            push AR2
059D AA40       264            mov R2, Seed+1
059F 1202CF     264            lcall ?Wait_Milli_Seconds
05A2 D002       264            pop AR2
05A4 C002       265            push AR2
05A6 AA41       265            mov R2, Seed+2
05A8 1202CF     265            lcall ?Wait_Milli_Seconds
05AB D002       265            pop AR2
05AD C002       266            push AR2
05AF AA42       266            mov R2, Seed+3
05B1 1202CF     266            lcall ?Wait_Milli_Seconds
05B4 D002       266            pop AR2
05B6 C002       267            push AR2
05B8 AA3F       267            mov R2, Seed+0
05BA 1202CF     267            lcall ?Wait_Milli_Seconds
05BD D002       267            pop AR2
05BF C002       268            push AR2
05C1 AA40       268            mov R2, Seed+1
05C3 1202CF     268            lcall ?Wait_Milli_Seconds
05C6 D002       268            pop AR2
05C8 C002       269            push AR2
05CA AA41       269            mov R2, Seed+2
05CC 1202CF     269            lcall ?Wait_Milli_Seconds
05CF D002       269            pop AR2
05D1 C002       270            push AR2
05D3 AA42       270            mov R2, Seed+3
05D5 1202CF     270            lcall ?Wait_Milli_Seconds
05D8 D002       270            pop AR2
05DA C002       271            push AR2
05DC AA3F       271            mov R2, Seed+0
05DE 1202CF     271            lcall ?Wait_Milli_Seconds
05E1 D002       271            pop AR2
05E3 C002       272            push AR2
05E5 AA40       272            mov R2, Seed+1
05E7 1202CF     272            lcall ?Wait_Milli_Seconds
05EA D002       272            pop AR2
05EC C002       273            push AR2
05EE AA41       273            mov R2, Seed+2
05F0 1202CF     273            lcall ?Wait_Milli_Seconds
05F3 D002       273            pop AR2
05F5 C002       274            push AR2
05F7 AA42       274            mov R2, Seed+3
05F9 1202CF     274            lcall ?Wait_Milli_Seconds
05FC D002       274            pop AR2
05FE C002       275            push AR2
0600 AA3F       275            mov R2, Seed+0
0602 1202CF     275            lcall ?Wait_Milli_Seconds
0605 D002       275            pop AR2
0607 C002       276            push AR2
0609 AA40       276            mov R2, Seed+1
060B 1202CF     276            lcall ?Wait_Milli_Seconds
060E D002       276            pop AR2
0610 C002       277            push AR2
0612 AA41       277            mov R2, Seed+2
0614 1202CF     277            lcall ?Wait_Milli_Seconds
0617 D002       277            pop AR2
0619 C002       278            push AR2
061B AA42       278            mov R2, Seed+3
061D 1202CF     278            lcall ?Wait_Milli_Seconds
0620 D002       278            pop AR2
0622 C002       279            push AR2
0624 AA3F       279            mov R2, Seed+0
0626 1202CF     279            lcall ?Wait_Milli_Seconds
0629 D002       279            pop AR2
062B C002       280            push AR2
062D AA40       280            mov R2, Seed+1
062F 1202CF     280            lcall ?Wait_Milli_Seconds
0632 D002       280            pop AR2
0634 C002       281            push AR2
0636 AA41       281            mov R2, Seed+2
0638 1202CF     281            lcall ?Wait_Milli_Seconds
063B D002       281            pop AR2
063D C002       282            push AR2
063F AA42       282            mov R2, Seed+3
0641 1202CF     282            lcall ?Wait_Milli_Seconds
0644 D002       282            pop AR2
0646 C002       283            push AR2
0648 AA3F       283            mov R2, Seed+0
064A 1202CF     283            lcall ?Wait_Milli_Seconds
064D D002       283            pop AR2
064F C002       284            push AR2
0651 AA40       284            mov R2, Seed+1
0653 1202CF     284            lcall ?Wait_Milli_Seconds
0656 D002       284            pop AR2
0658 C002       285            push AR2
065A AA41       285            mov R2, Seed+2
065C 1202CF     285            lcall ?Wait_Milli_Seconds
065F D002       285            pop AR2
0661 C002       286            push AR2
0663 AA42       286            mov R2, Seed+3
0665 1202CF     286            lcall ?Wait_Milli_Seconds
0668 D002       286            pop AR2
066A C002       287            push AR2
066C AA3F       287            mov R2, Seed+0
066E 1202CF     287            lcall ?Wait_Milli_Seconds
0671 D002       287            pop AR2
0673 C002       288            push AR2
0675 AA40       288            mov R2, Seed+1
0677 1202CF     288            lcall ?Wait_Milli_Seconds
067A D002       288            pop AR2
067C C002       289            push AR2
067E AA41       289            mov R2, Seed+2
0680 1202CF     289            lcall ?Wait_Milli_Seconds
0683 D002       289            pop AR2
0685 C002       290            push AR2
0687 AA42       290            mov R2, Seed+3
0689 1202CF     290            lcall ?Wait_Milli_Seconds
068C D002       290            pop AR2
068E 22         291       ret    
068F            292       
068F            293   Wait_Constant_Time:
068F C002       294            push AR2
0691 7AFF       294            mov R2, #255
0693 1202CF     294            lcall ?Wait_Milli_Seconds
0696 D002       294            pop AR2
0698            295            ;Dec_Capacitance
0698 C002       296            push AR2
069A 7AFF       296            mov R2, #255
069C 1202CF     296            lcall ?Wait_Milli_Seconds
069F D002       296            pop AR2
06A1            297       ;Dec_Capacitance
06A1 C002       298            push AR2
06A3 7AFF       298            mov R2, #255
06A5 1202CF     298            lcall ?Wait_Milli_Seconds
06A8 D002       298            pop AR2
06AA            299       ;Dec_Capacitance
06AA C002       300            push AR2
06AC 7AFF       300            mov R2, #255
06AE 1202CF     300            lcall ?Wait_Milli_Seconds
06B1 D002       300            pop AR2
06B3            301       ;Dec_Capacitance
06B3 C002       302            push AR2
06B5 7AFF       302            mov R2, #255
06B7 1202CF     302            lcall ?Wait_Milli_Seconds
06BA D002       302            pop AR2
06BC            303       ;Dec_Capacitance ... and so o
06BC C002       304            push AR2
06BE 7AFF       304            mov R2, #255
06C0 1202CF     304            lcall ?Wait_Milli_Seconds
06C3 D002       304            pop AR2
06C5 C002       305            push AR2
06C7 7AFF       305            mov R2, #255
06C9 1202CF     305            lcall ?Wait_Milli_Seconds
06CC D002       305            pop AR2
06CE C002       306            push AR2
06D0 7AFF       306            mov R2, #255
06D2 1202CF     306            lcall ?Wait_Milli_Seconds
06D5 D002       306            pop AR2
06D7 22         307       ret
06D8            308       
06D8            309   One_Cycle:
06D8 12056E     310            lcall Wait_Random_Time
06DB 120407     311       lcall Timer0_HIGH_Init
06DE            312       ;Wait for slap, if slapped, increment score
06DE 12068F     313       lcall Wait_Constant_Time ; waiting for players to slap
06E1 1203EE     314       lcall Timer0_Init
06E4            315       ;Wait for slap, if slapped, decrement score
06E4 22         316       ret
06E5            317       
06E5            318   Inc_Capacitance:
06E5            319   ; pseudocode:
06E5            320   ;        if P1 capacitance > 50 (Can replace this number), increment P1
06E5            321   ;   if P2 capacitance > 50 , increment P2
06E5            322   ;        lcall compareScores
06E5            323   ;        ret
06E5            324   
06E5            325   Dec_Capacitance:
06E5            326   ; pseudocode:
06E5            327   ;        if P1 capacitance > 50 (Can replace this number), decrement P1
06E5            328   ;   if P2 capacitance > 50 , decrement P2
06E5            329   ;        ret
06E5            330   
06E5            331   Compare_Scores:
06E5            332   ;   if p1Score == 5 , ljmp P1_Wins
06E5            333   ;        if p2Score == 5 , ljmp P2_Wins
06E5            334   ;                
06E5            335   
06E5            336   P1_Wins:
06E5            337   ; Display some sort of message
06E5            338   
06E5            339   P2_Wins:
06E5            340   ; display some sort of message
06E5            341   ;
06E5            342   Play_Music:
06E5            343   
06E5            344   
06E5            345   
06E5            346   end
