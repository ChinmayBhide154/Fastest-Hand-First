                  2   $LIST
0000              4   ; my edit
0000              5   org 0000H
0000 0203F0       6      ljmp MyProgram
0003              7   
0003              8   ; Timer/Counter 0 overflow interrupt vector
000B              9   org 0x000B
000B 02039B      10            ljmp Timer0_ISR   
000E             11   ; Timer/Counter 2 overflow interrupt vector
002B             12   org 0x002B
002B 0203D8      13            ljmp Timer2_ISR
002E             14   
002E             15   ; These register definitions needed by 'math32.inc'
0030             16   DSEG at 30H
0030             17   x:   ds 4
0034             18   y:   ds 4
0038             19   bcd: ds 5
003D             20   T2ov: ds 2 ; 16-bit timer 2 overflow (to measure the period of very slow signals)
003F             21   Seed: ds 4
0043             22   p1Score: ds 3
0046             23   p2Score: ds 3
0049             24   
0000             25   BSEG
0000             26   mf: dbit 1
0001             27   
                570   $LIST
                 29   $LIST
02C4             31   
02C4             32   
02C4             33   CLK           EQU 22118400 ; Microcontroller system crystal frequency in Hz
02C4             34   TIMER0_RATE   EQU 4096     ; 2048Hz squarewave (peak amplitude of CEM-1203 speaker)
02C4             35   TIMER0_RELOAD EQU ((65536-(CLK/TIMER0_RATE)))
02C4             36   TIMER2_RATE   EQU 1000     ; 1000Hz, for a timer tick of 1ms
02C4             37   TIMER2_RELOAD EQU ((65536-(CLK/TIMER2_RATE)))
02C4             38   
02C4             39   cseg
02C4             40   ; These 'equ' must match the hardware wiring
02C4             41   LCD_RS equ P3.2
02C4             42   ;LCD_RW equ PX.X ; Not used in this code, connect the pin to GND
02C4             43   LCD_E  equ P3.3
02C4             44   LCD_D4 equ P3.4
02C4             45   LCD_D5 equ P3.5
02C4             46   LCD_D6 equ P3.6
02C4             47   LCD_D7 equ P3.7
02C4             48   SOUND_OUT equ P1.1
02C4             49   
                 51   	$LIST
0370             53   
0370             54   ;                     1234567890123456    <- This helps determine the location of the counter
0370 50312020    55   Initial_Message:  db 'P1            P2', 0
     20202020
     20202020
     20205032
     00
0381 00          56   No_Signal_Str:    db '', 0
0382             57   
0382             58   Timer0_Init:
0382 E589        59            mov a, TMOD
0384 54F0        60            anl a, #0xf0 ; Clear the bits for timer 0
0386 4401        61            orl a, #0x01 ; Configure timer 0 as 16-timer
0388 F589        62            mov TMOD, a
038A 758CEA      63            mov TH0, #high(TIMER0_RELOAD)
038D 758AE8      64            mov TL0, #low(TIMER0_RELOAD)
0390             65            ; Set autoreload value
0390 75F4EA      66            mov RH0, #high(TIMER0_RELOAD)
0393 75F2E8      67            mov RL0, #low(TIMER0_RELOAD)
0396             68            ; Enable the timer and interrupts
0396 D2A9        69       setb ET0  ; Enable timer 0 interrupt
0398 D28C        70       setb TR0  ; Start timer 0
039A 22          71            ret
039B             72            
039B             73   Timer0_ISR:
039B             74            ;clr TF0  ; According to the data sheet this is done for us already.
039B B291        75            cpl SOUND_OUT ; Connect speaker to P1.1!
039D 32          76            reti
039E             77   
039E             78   ; Sends 10-digit BCD number in bcd to the LCD
039E             79   Display_10_digit_BCD:
039E C000        80            push ar0
03A0 A83C        80            mov r0, bcd+4
03A2 12035A      80            lcall ?Display_BCD
03A5 D000        80            pop ar0
03A7 C000        81            push ar0
03A9 A83B        81            mov r0, bcd+3
03AB 12035A      81            lcall ?Display_BCD
03AE D000        81            pop ar0
03B0 C000        82            push ar0
03B2 A83A        82            mov r0, bcd+2
03B4 12035A      82            lcall ?Display_BCD
03B7 D000        82            pop ar0
03B9 C000        83            push ar0
03BB A839        83            mov r0, bcd+1
03BD 12035A      83            lcall ?Display_BCD
03C0 D000        83            pop ar0
03C2 C000        84            push ar0
03C4 A838        84            mov r0, bcd+0
03C6 12035A      84            lcall ?Display_BCD
03C9 D000        84            pop ar0
03CB 22          85            ret
03CC             86   
03CC             87   ;Initializes timer/counter 2 as a 16-bit timer
03CC             88   InitTimer2:
03CC 75C800      89            mov T2CON, #0 ; Stop timer/counter.  Set as timer (clock input is pin 22.1184MHz).
03CF             90            ; Set the reload value on overflow to zero (just in case is not zero)
03CF 75CB00      91            mov RCAP2H, #0
03D2 75CA00      92            mov RCAP2L, #0
03D5 D2AD        93            setb ET2
03D7 22          94       ret
03D8             95   
03D8             96   Timer2_ISR:
03D8 C2CF        97            clr TF2  ; Timer 2 doesn't clear TF2 automatically. Do it in ISR
03DA C0E0        98            push acc
03DC 053D        99            inc T2ov+0
03DE E53D       100            mov a, T2ov+0
03E0 7002       101            jnz Timer2_ISR_done
03E2 053E       102            inc T2ov+1
03E4            103   Timer2_ISR_done:
03E4 D0E0       104            pop acc
03E6 32         105            reti
03E7            106   
03E7            107   ;---------------------------------;
03E7            108   ; Hardware initialization         ;
03E7            109   ;---------------------------------;
03E7            110   Initialize_All:
03E7 1203CC     111       lcall InitTimer2
03EA 12031E     112       lcall LCD_4BIT ; Initialize LCD
03ED D2AF       113       setb EA
03EF 22         114            ret
03F0            115   
03F0            116   ;---------------------------------;
03F0            117   ; Main program loop               ;
03F0            118   ;---------------------------------;
03F0            119   MyProgram:
03F0            120       ; Initialize the hardware:
03F0 75817F     121       mov SP, #7FH
03F3 1203E7     122       lcall Initialize_All
03F6 D280       123       setb P0.0 ; Pin is used as input
03F8            124   
03F8 C0E0       125            push acc
03FA 7401       125            mov a, #1
03FC 14         125            dec a
03FD 120355     125            lcall ?Set_Cursor_1 ; Select column and row
0400 D0E0       125            pop acc
0402 C083       126            push dph
0404 C082       126            push dpl
0406 C0E0       126            push acc
0408 900370     126            mov dptr, #Initial_Message
040B 120348     126            lcall ?Send_Constant_String
040E D0E0       126            pop acc
0410 D082       126            pop dpl
0412 D083       126            pop dph
0414            127       
0414 C0E0       128            push acc
0416 7401       128            mov a, #1
0418 14         128            dec a
0419 120353     128            lcall ?Set_Cursor_2 ; Select column and row
041C D0E0       128            pop acc
041E 854330     129       mov x, p1Score
0421 2400       130       add a, #0x00
0423 D4         131       da a
0424 F543       132       mov p1Score, a
0426 C000       133            push ar0
0428 A843       133            mov r0, p1Score
042A 12035A     133            lcall ?Display_BCD
042D D000       133            pop ar0
042F            134       
042F C0E0       135            push acc
0431 740F       135            mov a, #15
0433 14         135            dec a
0434 120353     135            lcall ?Set_Cursor_2 ; Select column and row
0437 D0E0       135            pop acc
0439 854630     136       mov x, p2Score
043C 2400       137       add a, #0x00
043E D4         138       da a
043F F546       139       mov p2Score, a
0441 C000       140            push ar0
0443 A843       140            mov r0, p1Score
0445 12035A     140            lcall ?Display_BCD
0448 D000       140            pop ar0
044A            141       
044A            142   forever:
044A            143            ; Repeated Random time wait calls are here for show just for now
044A C0E0       144            push acc
044C 7401       144            mov a, #1
044E 14         144            dec a
044F 120355     144            lcall ?Set_Cursor_1 ; Select column and row
0452 D0E0       144            pop acc
0454 120595     145            lcall Random
0457            146            ;wait random amount of time
0457 C002       147            push AR2
0459 AA3F       147            mov R2, Seed+0
045B 1202CF     147            lcall ?Wait_Milli_Seconds
045E D002       147            pop AR2
0460 C002       148            push AR2
0462 AA40       148            mov R2, Seed+1
0464 1202CF     148            lcall ?Wait_Milli_Seconds
0467 D002       148            pop AR2
0469 C002       149            push AR2
046B AA41       149            mov R2, Seed+2
046D 1202CF     149            lcall ?Wait_Milli_Seconds
0470 D002       149            pop AR2
0472 C002       150            push AR2
0474 AA42       150            mov R2, Seed+3
0476 1202CF     150            lcall ?Wait_Milli_Seconds
0479 D002       150            pop AR2
047B            151       
047B 120595     152       lcall Random
047E C002       153            push AR2
0480 AA3F       153            mov R2, Seed+0
0482 1202CF     153            lcall ?Wait_Milli_Seconds
0485 D002       153            pop AR2
0487 C002       154            push AR2
0489 AA40       154            mov R2, Seed+1
048B 1202CF     154            lcall ?Wait_Milli_Seconds
048E D002       154            pop AR2
0490 C002       155            push AR2
0492 AA41       155            mov R2, Seed+2
0494 1202CF     155            lcall ?Wait_Milli_Seconds
0497 D002       155            pop AR2
0499 C002       156            push AR2
049B AA42       156            mov R2, Seed+3
049D 1202CF     156            lcall ?Wait_Milli_Seconds
04A0 D002       156            pop AR2
04A2            157       
04A2 120595     158       lcall Random
04A5 C002       159            push AR2
04A7 AA3F       159            mov R2, Seed+0
04A9 1202CF     159            lcall ?Wait_Milli_Seconds
04AC D002       159            pop AR2
04AE C002       160            push AR2
04B0 AA40       160            mov R2, Seed+1
04B2 1202CF     160            lcall ?Wait_Milli_Seconds
04B5 D002       160            pop AR2
04B7 C002       161            push AR2
04B9 AA41       161            mov R2, Seed+2
04BB 1202CF     161            lcall ?Wait_Milli_Seconds
04BE D002       161            pop AR2
04C0 C002       162            push AR2
04C2 AA42       162            mov R2, Seed+3
04C4 1202CF     162            lcall ?Wait_Milli_Seconds
04C7 D002       162            pop AR2
04C9            163       
04C9 120595     164       lcall Random
04CC C002       165            push AR2
04CE AA3F       165            mov R2, Seed+0
04D0 1202CF     165            lcall ?Wait_Milli_Seconds
04D3 D002       165            pop AR2
04D5 C002       166            push AR2
04D7 AA40       166            mov R2, Seed+1
04D9 1202CF     166            lcall ?Wait_Milli_Seconds
04DC D002       166            pop AR2
04DE C002       167            push AR2
04E0 AA41       167            mov R2, Seed+2
04E2 1202CF     167            lcall ?Wait_Milli_Seconds
04E5 D002       167            pop AR2
04E7 C002       168            push AR2
04E9 AA42       168            mov R2, Seed+3
04EB 1202CF     168            lcall ?Wait_Milli_Seconds
04EE D002       168            pop AR2
04F0            169       ; synchronize with rising edge of the signal applied to pin P0.0
04F0            170       ;ljmp Wait
04F0            171       
04F0 C2CA       172       clr TR2 ; Stop timer 2
04F2 75CC00     173       mov TL2, #0
04F5 75CD00     174       mov TH2, #0
04F8 753D00     175       mov T2ov+0, #0
04FB 753E00     176       mov T2ov+1, #0
04FE C2CF       177       clr TF2
0500 D2CA       178       setb TR2
0502            179       
0502            180       ;Randomize button connected at P2.4
0502 20A4FD     181       jb P2.4, $
0505            182       
0505 85CD3F     183       mov Seed+0, TH2
0508 754001     184       mov Seed+1, #0x01
050B 754187     185       mov Seed+2, #0x87
050E 85CC42     186       mov Seed+3, TL2
0511 C2CA       187       clr TR2
0513            188       
0513            189   synch1:
0513 E53E       190            mov a, T2ov+1
0515 54FE       191            anl a, #0xfe
0517 7034       192            jnz no_signal ; If the count is larger than 0x01ffffffff*45ns=1.16s, we assume there is no signal
0519 2080F7     193       jb P0.0, synch1
051C            194   synch2:    
051C E53E       195            mov a, T2ov+1
051E 54FE       196            anl a, #0xfe
0520 702B       197            jnz no_signal
0522 3080F7     198       jnb P0.0, synch2
0525            199       
0525            200       ; Measure the period of the signal applied to pin P0.0
0525 C2CA       201       clr TR2
0527 75CC00     202       mov TL2, #0
052A 75CD00     203       mov TH2, #0
052D 753D00     204       mov T2ov+0, #0
0530 753E00     205       mov T2ov+1, #0
0533 C2CF       206       clr TF2
0535 D2CA       207       setb TR2 ; Start timer 2
0537            208   measure1:
0537 E53E       209            mov a, T2ov+1
0539 54FE       210            anl a, #0xfe
053B 7010       211            jnz no_signal 
053D 2080F7     212       jb P0.0, measure1
0540            213   measure2:    
0540 E53E       214            mov a, T2ov+1
0542 54FE       215            anl a, #0xfe
0544 7007       216            jnz no_signal
0546 3080F7     217       jnb P0.0, measure2
0549 C2CA       218       clr TR2 ; Stop timer 2, [T2ov+1, T2ov+0, TH2, TL2] * 45.21123ns is the period
054B            219   
054B 801F       220            sjmp skip_this
054D            221   no_signal:       
054D C0E0       222            push acc
054F 7401       222            mov a, #1
0551 14         222            dec a
0552 120353     222            lcall ?Set_Cursor_2 ; Select column and row
0555 D0E0       222            pop acc
0557 C083       223            push dph
0559 C082       223            push dpl
055B C0E0       223            push acc
055D 900381     223            mov dptr, #No_Signal_Str
0560 120348     223            lcall ?Send_Constant_String
0563 D0E0       223            pop acc
0565 D082       223            pop dpl
0567 D083       223            pop dph
0569 02044A     224       ljmp forever ; Repeat! 
056C            225   skip_this:
056C            226   
056C            227            ; Make sure [T2ov+1, T2ov+2, TH2, TL2]!=0
056C E5CC       228            mov a, TL2
056E 45CD       229            orl a, TH2
0570 453D       230            orl a, T2ov+0
0572 453E       231            orl a, T2ov+1
0574 60D7       232            jz no_signal
0576            233            ; Using integer math, convert the period to frequency:
0576 85CC30     234            mov x+0, TL2
0579 85CD31     235            mov x+1, TH2
057C 853D32     236            mov x+2, T2ov+0
057F 853E33     237            mov x+3, T2ov+1
0582            238            
0582            239            
0582            240            ; Convert the result to BCD and display on LCD
0582 C0E0       241            push acc
0584 7401       241            mov a, #1
0586 14         241            dec a
0587 120353     241            lcall ?Set_Cursor_2 ; Select column and row
058A D0E0       241            pop acc
058C 12002E     242            lcall hex2bcd
058F 12039E     243            lcall Display_10_digit_BCD
0592 02044A     244       ljmp forever ; Repeat! 
0595            245   
0595            246   
0595            247   ;Generates random number
0595            248   Random: 
0595            249            ; Dont worry about this, it is just some math that is good enough to randomize numbers enough for our purposes
0595 853F30     250       mov x+0, Seed+0
0598 854031     251       mov x+1, Seed+1
059B 854132     252       mov x+2, Seed+2
059E 854233     253       mov x+3, Seed+3
05A1 7534FD     254            mov y+0, #low (214013 % 0x10000) 
05A4 753543     254            mov y+1, #high(214013 % 0x10000) 
05A7 753603     254            mov y+2, #low (214013 / 0x10000) 
05AA 753700     254            mov y+3, #high(214013 / 0x10000) 
05AD 1201A8     255       lcall mul32
05B0 7534C3     256            mov y+0, #low (2531011 % 0x10000) 
05B3 75359E     256            mov y+1, #high(2531011 % 0x10000) 
05B6 753626     256            mov y+2, #low (2531011 / 0x10000) 
05B9 753700     256            mov y+3, #high(2531011 / 0x10000) 
05BC 1200F3     257       lcall add32
05BF 85303F     258       mov Seed+0, x+0
05C2 853140     259       mov Seed+1, x+1
05C5 853241     260       mov Seed+2, x+2
05C8 853342     261       mov Seed+3, x+3
05CB            262       
05CB C0E0       263            push acc
05CD 7403       263            mov a, #3
05CF 14         263            dec a
05D0 120355     263            lcall ?Set_Cursor_1 ; Select column and row
05D3 D0E0       263            pop acc
05D5 12002E     264            lcall hex2bcd
05D8 12039E     265            lcall Display_10_digit_BCD
05DB 12039B     266            lcall Timer0_ISR ;Why no alarm trigger?
05DE 22         267       ret
05DF            268       
05DF            269      
05DF            270       
05DF            271   
05DF            272   en
