                  2   $LIST
0000              4   
0000              5   org 0000H
0000 02042C       6      ljmp MyProgram
0003              7      
000B              8   org 0x000B
000B 020420       9            ljmp Timer0_ISR
000E             10   ; Timer/Counter 2 overflow interrupt vector
002B             11   org 0x002B
002B 0203DF      12            ljmp Timer2_ISR
002E             13   
002E             14   ; These register definitions needed by 'math32.inc'
0030             15   DSEG at 30H
0030             16   x:   ds 4
0034             17   y:   ds 4
0038             18   bcd: ds 5
003D             19   T2ov: ds 2 ; 16-bit timer 2 overflow (to measure the period of very slow signals)
003F             20   Seed: ds 4
0043             21   p1Score: ds 3
0046             22   p2Score: ds 3
0049             23   capacitance: ds 4
004D             24   
004D             25   
0000             26   BSEG
0000             27   mf: dbit 1
0001             28   
                570   $LIST
                 30   $LIST
02C4             32   
02C4             33   cseg
02C4             34   ; These 'equ' must match the hardware wiring
02C4             35   LCD_RS equ P3.2
02C4             36   ;LCD_RW equ PX.X ; Not used in this code, connect the pin to GND
02C4             37   LCD_E  equ P3.3
02C4             38   LCD_D4 equ P3.4
02C4             39   LCD_D5 equ P3.5
02C4             40   LCD_D6 equ P3.6
02C4             41   LCD_D7 equ P3.7
02C4             42   
                 44   	$LIST
0370             46   
0370             47   CLK           EQU 22118400 ; Microcontroller system crystal frequency in Hz
0370             48   TIMER0_RATE   EQU 1000     ; 2048Hz squarewave (peak amplitude of CEM-1203 speaker)
0370             49   TIMER0_RATE_HIGH EQU 4096
0370             50   TIMER0_RATE_LOW EQU 1000
0370             51   TIMER0_RELOAD EQU ((65536-(CLK/TIMER0_RATE)))
0370             52   TIMER0_RELOAD_HIGH EQU ((65536-(CLK/TIMER0_RATE_HIGH)))
0370             53   TIMER2_RATE   EQU 1000     ; 1000Hz, for a timer tick of 1ms
0370             54   ;Timer0_Rate used to change pitch
0370             55   TIMER2_RELOAD EQU ((65536-(CLK/TIMER2_RATE)))
0370             56   
0370             57   ;Music Frequencies
0370             58   TIMER0_RATE_A   EQU 440 
0370             59   
0370             60   
0370             61   cseg
0370             62   
0370             63   SOUND_OUT equ P1.1
0370             64   Player_One equ P2.1
0370             65   Player_Two equ P0.0
0370             66   
0370             67   
0370             68   ;                     1234567890123456    <- This helps determine the location of the counter
0370 50312020    69   Initial_Message:  db 'P1          P2', 0
     20202020
     20202020
     503200
037F 30302020    70   Overflow_Str:    db '00           00', 0
     20202020
     20202020
     20303000
038F 506C6179    71   Player_One_Text: db 'Player 1: ', 0
     65722031
     3A2000
039A 506C6179    72   Player_Two_Text: db 'Player 2: ',0
     65722032
     3A2000
03A5             73   
03A5             74   
03A5             75   ; Sends 10-digit BCD number in bcd to the LCD
03A5             76   Display_10_digit_BCD:
03A5 C000        77            push ar0
03A7 A83C        77            mov r0, bcd+4
03A9 12035A      77            lcall ?Display_BCD
03AC D000        77            pop ar0
03AE C000        78            push ar0
03B0 A83B        78            mov r0, bcd+3
03B2 12035A      78            lcall ?Display_BCD
03B5 D000        78            pop ar0
03B7 C000        79            push ar0
03B9 A83A        79            mov r0, bcd+2
03BB 12035A      79            lcall ?Display_BCD
03BE D000        79            pop ar0
03C0 C000        80            push ar0
03C2 A839        80            mov r0, bcd+1
03C4 12035A      80            lcall ?Display_BCD
03C7 D000        80            pop ar0
03C9 C000        81            push ar0
03CB A838        81            mov r0, bcd+0
03CD 12035A      81            lcall ?Display_BCD
03D0 D000        81            pop ar0
03D2 22          82            ret
03D3             83   
03D3             84   ;Initializes timer/counter 2 as a 16-bit timer
03D3             85   InitTimer2:
03D3 75C800      86            mov T2CON, #0 ; Stop timer/counter.  Set as timer (clock input is pin 22.1184MHz).
03D6             87            ; Set the reload value on overflow to zero (just in case is not zero)
03D6 75CB00      88            mov RCAP2H, #0
03D9 75CA00      89            mov RCAP2L, #0
03DC D2AD        90            setb ET2
03DE 22          91       ret
03DF             92   
03DF             93   Timer2_ISR:
03DF C2CF        94            clr TF2  ; Timer 2 doesn't clear TF2 automatically. Do it in ISR
03E1 C0E0        95            push acc
03E3 053D        96            inc T2ov+0
03E5 E53D        97            mov a, T2ov+0
03E7 7002        98            jnz Timer2_ISR_done
03E9 053E        99            inc T2ov+1
03EB            100   Timer2_ISR_done:
03EB D0E0       101            pop acc
03ED 32         102            reti
03EE            103   
03EE            104   Timer0_Init:
03EE E589       105            mov a, TMOD
03F0 54F0       106            anl a, #0xf0 ; Clear the bits for timer 0
03F2 4401       107            orl a, #0x01 ; Configure timer 0 as 16-timer
03F4 F589       108            mov TMOD, a
03F6 758CA9     109            mov TH0, #high(TIMER0_RELOAD)
03F9 758A9A     110            mov TL0, #low(TIMER0_RELOAD)
03FC            111            ; Set autoreload value
03FC 75F4A9     112            mov RH0, #high(TIMER0_RELOAD)
03FF 75F29A     113            mov RL0, #low(TIMER0_RELOAD)
0402            114            ; Enable the timer and interrupts
0402 D2A9       115       setb ET0  ; Enable timer 0 interrupt
0404 D28C       116       setb TR0  ; Start timer 0
0406 22         117            ret
0407            118            
0407            119   Timer0_HIGH_Init:
0407 E589       120            mov a, TMOD
0409 54F0       121            anl a, #0xf0 ; Clear the bits for timer 0
040B 4401       122            orl a, #0x01 ; Configure timer 0 as 16-timer
040D F589       123            mov TMOD, a
040F 758CEA     124            mov TH0, #high(TIMER0_RELOAD_HIGH)
0412 758AE8     125            mov TL0, #low(TIMER0_RELOAD_HIGH)
0415            126            ; Set autoreload value
0415 75F4EA     127            mov RH0, #high(TIMER0_RELOAD_HIGH)
0418 75F2E8     128            mov RL0, #low(TIMER0_RELOAD_HIGH)
041B            129            ; Enable the timer and interrupts
041B D2A9       130       setb ET0  ; Enable timer 0 interrupt
041D D28C       131       setb TR0  ; Start timer 0
041F 22         132            ret
0420            133   Timer0_ISR:
0420            134            ;clr TF0  ; According to the data sheet this is done for us already.
0420 B291       135            cpl SOUND_OUT ; Connect speaker to P1.1!
0422 32         136            reti
0423            137   
0423            138   ;---------------------------------;
0423            139   ; Hardware initialization         ;
0423            140   ;---------------------------------;
0423            141   Initialize_All:
0423 1203D3     142       lcall InitTimer2
0426 12031E     143       lcall LCD_4BIT ; Initialize LCD
0429 D2AF       144       setb EA
042B 22         145            ret
042C            146   
042C            147   ;---------------------------------;
042C            148   ; Main program loop               ;
042C            149   ;---------------------------------;
042C            150   MyProgram:
042C            151       ; Initialize the hardware:
042C 75817F     152       mov SP, #7FH
042F 120423     153       lcall Initialize_All
0432 D280       154       setb P0.0 ; Pin is used as input
0434            155       
0434 754300     156       mov p1Score, #0x00
0437 754600     157       mov p2Score, #0x00
043A            158       
043A C0E0       159            push acc
043C 7401       159            mov a, #1
043E 14         159            dec a
043F 120355     159            lcall ?Set_Cursor_1 ; Select column and row
0442 D0E0       159            pop acc
0444 C083       160            push dph
0446 C082       160            push dpl
0448 C0E0       160            push acc
044A 900370     160            mov dptr, #Initial_Message
044D 120348     160            lcall ?Send_Constant_String
0450 D0E0       160            pop acc
0452 D082       160            pop dpl
0454 D083       160            pop dph
0456            161       
0456 1203EE     162       lcall Timer0_Init
0459 1203D3     163       lcall InitTimer2
045C            164       
045C            165   forever:
045C            166       ; synchronize with rising edge of the signal applied to pin P0.0
045C C2CA       167       clr TR2 ; Stop timer 2
045E 75CC00     168       mov TL2, #0
0461 75CD00     169       mov TH2, #0
0464 753D00     170       mov T2ov+0, #0
0467 753E00     171       mov T2ov+1, #0
046A C2CF       172       clr TF2
046C D2CA       173       setb TR2
046E            174       
046E            175       ;lcall One_Cycle
046E            176       
046E 85CD3F     177       mov Seed+0, TH2
0471 754001     178       mov Seed+1, #0x01
0474 754187     179       mov Seed+2, #0x87
0477 85CC42     180       mov Seed+3, TL2
047A C2CA       181       clr TR2
047C            182        
047C            183   synch1:
047C E53E       184            mov a, T2ov+1
047E 54FE       185            anl a, #0xfe
0480 7034       186            jnz no_signal ; If the count is larger than 0x01ffffffff*45ns=1.16s, we assume there is no signal
0482 2080F7     187       jb P0.0, synch1
0485            188   synch2:    
0485 E53E       189            mov a, T2ov+1
0487 54FE       190            anl a, #0xfe
0489 702B       191            jnz no_signal
048B 3080F7     192       jnb P0.0, synch2
048E            193       ; Measure the period of the signal applied to pin P0.0
048E C2CA       194       clr TR2
0490 75CC00     195       mov TL2, #0
0493 75CD00     196       mov TH2, #0
0496 753D00     197       mov T2ov+0, #0
0499 753E00     198       mov T2ov+1, #0
049C C2CF       199       clr TF2
049E D2CA       200       setb TR2 ; Start timer 2
04A0            201   measure1:
04A0 E53E       202            mov a, T2ov+1
04A2 54FE       203            anl a, #0xfe
04A4 7010       204            jnz no_signal 
04A6 2080F7     205       jb P0.0, measure1
04A9            206   measure2:    
04A9 E53E       207            mov a, T2ov+1
04AB 54FE       208            anl a, #0xfe
04AD 7007       209            jnz no_signal
04AF 3080F7     210       jnb P0.0, measure2
04B2 C2CA       211       clr TR2 ; Stop timer 2, [T2ov+1, T2ov+0, TH2, TL2] * 45.21123ns is the period
04B4            212   
04B4 801F       213            sjmp skip_this
04B6            214   no_signal:       
04B6 C0E0       215            push acc
04B8 7401       215            mov a, #1
04BA 14         215            dec a
04BB 120353     215            lcall ?Set_Cursor_2 ; Select column and row
04BE D0E0       215            pop acc
04C0 C083       216            push dph
04C2 C082       216            push dpl
04C4 C0E0       216            push acc
04C6 90037F     216            mov dptr, #Overflow_Str
04C9 120348     216            lcall ?Send_Constant_String
04CC D0E0       216            pop acc
04CE D082       216            pop dpl
04D0 D083       216            pop dph
04D2 02045C     217       ljmp forever ; Repeat! 
04D5            218   skip_this:
04D5            219   
04D5            220            ; Make sure [T2ov+1, T2ov+2, TH2, TL2]!=0
04D5 E5CC       221            mov a, TL2
04D7 45CD       222            orl a, TH2
04D9 453D       223            orl a, T2ov+0
04DB 453E       224            orl a, T2ov+1
04DD 60D7       225            jz no_signal
04DF            226            ; Using integer math, convert the period to frequency:
04DF 85CC30     227            mov x+0, TL2
04E2 85CD31     228            mov x+1, TH2
04E5 853D32     229            mov x+2, T2ov+0
04E8 853E33     230            mov x+3, T2ov+1
04EB 75342D     231            mov y+0, #low (45 % 0x10000) 
04EE 753500     231            mov y+1, #high(45 % 0x10000) 
04F1 753600     231            mov y+2, #low (45 / 0x10000) 
04F4 753700     231            mov y+3, #high(45 / 0x10000)  ; One clock pulse is 1/22.1184MHz=45.21123ns
04F7 1201A8     232            lcall mul32
04FA 753464     233            mov y+0, #low (100 % 0x10000) 
04FD 753500     233            mov y+1, #high(100 % 0x10000) 
0500 753600     233            mov y+2, #low (100 / 0x10000) 
0503 753700     233            mov y+3, #high(100 / 0x10000)  ;mult by 1.44 by mult 144/100
0506 120235     234            lcall div32
0509 753490     235            mov y+0, #low (144 % 0x10000) 
050C 753500     235            mov y+1, #high(144 % 0x10000) 
050F 753600     235            mov y+2, #low (144 / 0x10000) 
0512 753700     235            mov y+3, #high(144 / 0x10000)   
0515 1201A8     236            lcall mul32
0518 7534B0     237            mov y+0, #low (1200 % 0x10000) 
051B 753504     237            mov y+1, #high(1200 % 0x10000) 
051E 753600     237            mov y+2, #low (1200 / 0x10000) 
0521 753700     237            mov y+3, #high(1200 / 0x10000)  ;since i used 2 1k resistors
0524 120235     238            lcall div32
0527            239            
0527            240            ;b holds the capacitance
0527 8530F0     241            mov b, x
052A 85F049     242            mov capacitance, b
052D            243   
052D            244            ;comparing capacitance with 200 nF
052D            245            ;Set_Cursor(2, 1)
052D            246            ;lcall hex2bcd
052D            247            ;lcall Display_10_digit_BCD
052D 120778     248            lcall One_Cycle
0530            249            
0530            250            
0530 02045C     251       ljmp forever ; Repeat! 
0533            252       
0533            253   Inc_Score:
0533 753049     254            mov x+0, #low (capacitance % 0x10000) 
0536 753100     254            mov x+1, #high(capacitance % 0x10000) 
0539 753200     254            mov x+2, #low (capacitance / 0x10000) 
053C 753300     254            mov x+3, #high(capacitance / 0x10000) 
053F 7534C8     255            mov y+0, #low (200 % 0x10000) 
0542 753500     255            mov y+1, #high(200 % 0x10000) 
0545 753600     255            mov y+2, #low (200 / 0x10000) 
0548 753700     255            mov y+3, #high(200 / 0x10000) 
054B 120152     256            lcall x_gt_y
054E            257            ;if the capacitance is greater than 200, mf will be set to 1
054E            258            
054E 200001     259            jb mf, Add_Score
0551 22         260            ret
0552            261            
0552            262   Add_Score:
0552 0543       263            inc p1Score
0554 753043     264            mov x+0, #low (p1Score % 0x10000) 
0557 753100     264            mov x+1, #high(p1Score % 0x10000) 
055A 753200     264            mov x+2, #low (p1Score / 0x10000) 
055D 753300     264            mov x+3, #high(p1Score / 0x10000) 
0560 C0E0       265            push acc
0562 7401       265            mov a, #1
0564 14         265            dec a
0565 120353     265            lcall ?Set_Cursor_2 ; Select column and row
0568 D0E0       265            pop acc
056A 12002E     266            lcall hex2bcd
056D C000       267            push ar0
056F A843       267            mov r0, p1Score
0571 12035A     267            lcall ?Display_BCD
0574 D000       267            pop ar0
0576            268            
0576 02045C     269            ljmp forever            
0579            270   
0579            271   Bridge_Forever:
0579 02045C     272            ljmp forever
057C            273            
057C            274   ; pseudocode:
057C            275   ;        if P1 capacitance > 50 (Can replace this number), increment P1
057C            276   ;   if P2 capacitance > 50 , increment P2
057C            277   ;        lcall compareScores
057C            278   ;        ret
057C            279   
057C            280   Dec_Score:
057C 753049     281            mov x+0, #low (capacitance % 0x10000) 
057F 753100     281            mov x+1, #high(capacitance % 0x10000) 
0582 753200     281            mov x+2, #low (capacitance / 0x10000) 
0585 753300     281            mov x+3, #high(capacitance / 0x10000) 
0588 7534C8     282            mov y+0, #low (200 % 0x10000) 
058B 753500     282            mov y+1, #high(200 % 0x10000) 
058E 753600     282            mov y+2, #low (200 / 0x10000) 
0591 753700     282            mov y+3, #high(200 / 0x10000) 
0594 120152     283            lcall x_gt_y
0597            284            ;if the capacitance is greater than 200, mf will be set to 1
0597            285            
0597 200001     286            jb mf, Sub_Score
059A 22         287            ret
059B            288            
059B            289   Sub_Score:
059B 1543       290            dec p1Score
059D 753043     291            mov x+0, #low (p1Score % 0x10000) 
05A0 753100     291            mov x+1, #high(p1Score % 0x10000) 
05A3 753200     291            mov x+2, #low (p1Score / 0x10000) 
05A6 753300     291            mov x+3, #high(p1Score / 0x10000) 
05A9            292            
05A9 C0E0       293            push acc
05AB 7401       293            mov a, #1
05AD 14         293            dec a
05AE 120353     293            lcall ?Set_Cursor_2 ; Select column and row
05B1 D0E0       293            pop acc
05B3 12002E     294            lcall hex2bcd
05B6 C000       295            push ar0
05B8 A843       295            mov r0, p1Score
05BA 12035A     295            lcall ?Display_BCD
05BD D000       295            pop ar0
05BF            296            
05BF 02045C     297            ljmp forever
05C2            298   ; pseudocode:
05C2            299   ;        if P1 capacitance > 50 (Can replace this number), decrement P1
05C2            300   ;   if P2 capacitance > 50 , decrement P2
05C2            301   ;        ret    
05C2            302   
05C2            303   Random: 
05C2            304            ; Dont worry about this, it is just some math that is good enough to randomize numbers enough for our purposes
05C2 853F30     305       mov x+0, Seed+0
05C5 854031     306       mov x+1, Seed+1
05C8 854132     307       mov x+2, Seed+2
05CB 854233     308       mov x+3, Seed+3
05CE 7534FD     309            mov y+0, #low (214013 % 0x10000) 
05D1 753543     309            mov y+1, #high(214013 % 0x10000) 
05D4 753603     309            mov y+2, #low (214013 / 0x10000) 
05D7 753700     309            mov y+3, #high(214013 / 0x10000) 
05DA 1201A8     310       lcall mul32
05DD 7534C3     311            mov y+0, #low (2531011 % 0x10000) 
05E0 75359E     311            mov y+1, #high(2531011 % 0x10000) 
05E3 753626     311            mov y+2, #low (2531011 / 0x10000) 
05E6 753700     311            mov y+3, #high(2531011 / 0x10000) 
05E9 1200F3     312       lcall add32
05EC 85303F     313       mov Seed+0, x+0
05EF 853140     314       mov Seed+1, x+1
05F2 853241     315       mov Seed+2, x+2
05F5 853342     316       mov Seed+3, x+3
05F8 22         317       ret
05F9            318       
05F9            319   Wait_Random_Time:
05F9 C002       320            push AR2
05FB AA3F       320            mov R2, Seed+0
05FD 1202CF     320            lcall ?Wait_Milli_Seconds
0600 D002       320            pop AR2
0602 12057C     321            lcall Dec_Score
0605 C002       322            push AR2
0607 AA40       322            mov R2, Seed+1
0609 1202CF     322            lcall ?Wait_Milli_Seconds
060C D002       322            pop AR2
060E            323       ;Inc_Score ... so on in between each random wait time
060E 12057C     324       lcall Dec_Score
0611 C002       325            push AR2
0613 AA41       325            mov R2, Seed+2
0615 1202CF     325            lcall ?Wait_Milli_Seconds
0618 D002       325            pop AR2
061A 12057C     326       lcall Dec_Score
061D C002       327            push AR2
061F AA42       327            mov R2, Seed+3
0621 1202CF     327            lcall ?Wait_Milli_Seconds
0624 D002       327            pop AR2
0626 12057C     328       lcall Dec_Score
0629 C002       329            push AR2
062B AA3F       329            mov R2, Seed+0
062D 1202CF     329            lcall ?Wait_Milli_Seconds
0630 D002       329            pop AR2
0632 12057C     330       lcall Dec_Score
0635 C002       331            push AR2
0637 AA40       331            mov R2, Seed+1
0639 1202CF     331            lcall ?Wait_Milli_Seconds
063C D002       331            pop AR2
063E 12057C     332       lcall Dec_Score
0641 C002       333            push AR2
0643 AA41       333            mov R2, Seed+2
0645 1202CF     333            lcall ?Wait_Milli_Seconds
0648 D002       333            pop AR2
064A 12057C     334       lcall Dec_Score
064D C002       335            push AR2
064F AA42       335            mov R2, Seed+3
0651 1202CF     335            lcall ?Wait_Milli_Seconds
0654 D002       335            pop AR2
0656 12057C     336       lcall Dec_Score
0659 C002       337            push AR2
065B AA3F       337            mov R2, Seed+0
065D 1202CF     337            lcall ?Wait_Milli_Seconds
0660 D002       337            pop AR2
0662 12057C     338       lcall Dec_Score
0665 C002       339            push AR2
0667 AA40       339            mov R2, Seed+1
0669 1202CF     339            lcall ?Wait_Milli_Seconds
066C D002       339            pop AR2
066E 12057C     340       lcall Dec_Score
0671 C002       341            push AR2
0673 AA41       341            mov R2, Seed+2
0675 1202CF     341            lcall ?Wait_Milli_Seconds
0678 D002       341            pop AR2
067A 12057C     342       lcall Dec_Score
067D C002       343            push AR2
067F AA42       343            mov R2, Seed+3
0681 1202CF     343            lcall ?Wait_Milli_Seconds
0684 D002       343            pop AR2
0686 12057C     344       lcall Dec_Score
0689 C002       345            push AR2
068B AA3F       345            mov R2, Seed+0
068D 1202CF     345            lcall ?Wait_Milli_Seconds
0690 D002       345            pop AR2
0692 12057C     346            lcall Dec_Score
0695 C002       347            push AR2
0697 AA40       347            mov R2, Seed+1
0699 1202CF     347            lcall ?Wait_Milli_Seconds
069C D002       347            pop AR2
069E            348       ;Inc_Score ... so on in between each random wait time
069E 12057C     349       lcall Dec_Score
06A1 C002       350            push AR2
06A3 AA41       350            mov R2, Seed+2
06A5 1202CF     350            lcall ?Wait_Milli_Seconds
06A8 D002       350            pop AR2
06AA 12057C     351       lcall Dec_Score
06AD C002       352            push AR2
06AF AA42       352            mov R2, Seed+3
06B1 1202CF     352            lcall ?Wait_Milli_Seconds
06B4 D002       352            pop AR2
06B6 12057C     353       lcall Dec_Score
06B9 C002       354            push AR2
06BB AA3F       354            mov R2, Seed+0
06BD 1202CF     354            lcall ?Wait_Milli_Seconds
06C0 D002       354            pop AR2
06C2 12057C     355            lcall Dec_Score
06C5 C002       356            push AR2
06C7 AA40       356            mov R2, Seed+1
06C9 1202CF     356            lcall ?Wait_Milli_Seconds
06CC D002       356            pop AR2
06CE            357       ;Inc_Score ... so on in between each random wait time
06CE 12057C     358       lcall Dec_Score
06D1 C002       359            push AR2
06D3 AA41       359            mov R2, Seed+2
06D5 1202CF     359            lcall ?Wait_Milli_Seconds
06D8 D002       359            pop AR2
06DA 12057C     360       lcall Dec_Score
06DD C002       361            push AR2
06DF AA42       361            mov R2, Seed+3
06E1 1202CF     361            lcall ?Wait_Milli_Seconds
06E4 D002       361            pop AR2
06E6 12057C     362       lcall Dec_Score
06E9 C002       363            push AR2
06EB AA3F       363            mov R2, Seed+0
06ED 1202CF     363            lcall ?Wait_Milli_Seconds
06F0 D002       363            pop AR2
06F2 12057C     364            lcall Dec_Score
06F5 C002       365            push AR2
06F7 AA40       365            mov R2, Seed+1
06F9 1202CF     365            lcall ?Wait_Milli_Seconds
06FC D002       365            pop AR2
06FE            366       ;Inc_Score ... so on in between each random wait time
06FE 12057C     367       lcall Dec_Score
0701 C002       368            push AR2
0703 AA41       368            mov R2, Seed+2
0705 1202CF     368            lcall ?Wait_Milli_Seconds
0708 D002       368            pop AR2
070A 12057C     369       lcall Dec_Score
070D C002       370            push AR2
070F AA42       370            mov R2, Seed+3
0711 1202CF     370            lcall ?Wait_Milli_Seconds
0714 D002       370            pop AR2
0716 12057C     371       lcall Dec_Score
0719 22         372       ret    
071A            373       
071A            374   Wait_Constant_Time:
071A C002       375            push AR2
071C 7AFF       375            mov R2, #255
071E 1202CF     375            lcall ?Wait_Milli_Seconds
0721 D002       375            pop AR2
0723 120533     376            lcall Inc_Score
0726 C002       377            push AR2
0728 7AFF       377            mov R2, #255
072A 1202CF     377            lcall ?Wait_Milli_Seconds
072D D002       377            pop AR2
072F 120533     378       lcall Inc_Score
0732 C002       379            push AR2
0734 7AFF       379            mov R2, #255
0736 1202CF     379            lcall ?Wait_Milli_Seconds
0739 D002       379            pop AR2
073B 120533     380       lcall Inc_Score
073E C002       381            push AR2
0740 7AFF       381            mov R2, #255
0742 1202CF     381            lcall ?Wait_Milli_Seconds
0745 D002       381            pop AR2
0747 120533     382       lcall Inc_Score
074A C002       383            push AR2
074C 7AFF       383            mov R2, #255
074E 1202CF     383            lcall ?Wait_Milli_Seconds
0751 D002       383            pop AR2
0753 120533     384       lcall Inc_Score
0756 C002       385            push AR2
0758 7AFF       385            mov R2, #255
075A 1202CF     385            lcall ?Wait_Milli_Seconds
075D D002       385            pop AR2
075F 120533     386       lcall Inc_Score
0762 C002       387            push AR2
0764 7AFF       387            mov R2, #255
0766 1202CF     387            lcall ?Wait_Milli_Seconds
0769 D002       387            pop AR2
076B 120533     388       lcall Inc_Score
076E C002       389            push AR2
0770 7AFF       389            mov R2, #255
0772 1202CF     389            lcall ?Wait_Milli_Seconds
0775 D002       389            pop AR2
0777 22         390       ret
0778            391       
0778            392   One_Cycle:
0778 1205F9     393            lcall Wait_Random_Time ; in here, we are continuously checking if someone slaps, if they do, we decrement
077B 120407     394       lcall Timer0_HIGH_Init
077E            395       ;Wait for slap, if slapped, increment score
077E 12071A     396       lcall Wait_Constant_Time ; in here, we are continuously checking if someone slaps, if they do we increment
0781 1203EE     397       lcall Timer0_Init
0784            398       ;Wait for slap, if slapped, decrement score
0784 22         399       ret
0785            400       
0785            401   Compare_Scores:
0785            402   ;   if p1Score == 5 , ljmp P1_Wins
0785            403            
0785            404   ;        if p2Score == 5 , ljmp P2_Wins
0785            405   ;                
0785            406   
0785            407   P1_Wins:
0785            408   ; Display some sort of message
0785            409   
0785            410   P2_Wins:
0785            411   ; display some sort of message
0785            412   ;
0785            413   Play_Music:
0785            414   
0785            415   
0785            416   
0785            417   end
