                  2   $LIST
0000              4   ; my edit
0000              5   
0000              6   ;timer closer to LCD: is connected to pin 2.0
0000              7   ; other timer is connected to pin 2.1
0000              8   
0000              9   org 0000H
0000 020409      10      ljmp MyProgram
0003             11   
0003             12   ; Timer/Counter 0 overflow interrupt vector
000B             13   org 0x000B
000B 0203B4      14            ljmp Timer0_ISR   
000E             15   ; Timer/Counter 2 overflow interrupt vector
002B             16   org 0x002B
002B 0203F1      17            ljmp Timer2_ISR
002E             18   
002E             19   ; These register definitions needed by 'math32.inc'
0030             20   DSEG at 30H
0030             21   x:   ds 4
0034             22   y:   ds 4
0038             23   bcd: ds 5
003D             24   T2ov: ds 2 ; 16-bit timer 2 overflow (to measure the period of very slow signals)
003F             25   Seed: ds 4
0043             26   p1Score: ds 3
0046             27   p2Score: ds 3
0049             28   
0000             29   BSEG
0000             30   mf: dbit 1
0001             31   
                570   $LIST
                 33   $LIST
02C4             35   
02C4             36   
02C4             37   CLK           EQU 22118400 ; Microcontroller system crystal frequency in Hz
02C4             38   TIMER0_RATE   EQU 1000     ; 2048Hz squarewave (peak amplitude of CEM-1203 speaker)
02C4             39   TIMER0_RATE_HIGH EQU 4096
02C4             40   TIMER0_RATE_LOW EQU 1000
02C4             41   TIMER0_RELOAD EQU ((65536-(CLK/TIMER0_RATE)))
02C4             42   TIMER0_RELOAD_HIGH EQU ((65536-(CLK/TIMER0_RATE_HIGH)))
02C4             43   TIMER2_RATE   EQU 1000     ; 1000Hz, for a timer tick of 1ms
02C4             44   ;Timer0_Rate used to change pitch
02C4             45   TIMER2_RELOAD EQU ((65536-(CLK/TIMER2_RATE)))
02C4             46   
02C4             47   cseg
02C4             48   ; These 'equ' must match the hardware wiring
02C4             49   LCD_RS equ P3.2
02C4             50   ;LCD_RW equ PX.X ; Not used in this code, connect the pin to GND
02C4             51   LCD_E  equ P3.3
02C4             52   LCD_D4 equ P3.4
02C4             53   LCD_D5 equ P3.5
02C4             54   LCD_D6 equ P3.6
02C4             55   LCD_D7 equ P3.7
02C4             56   SOUND_OUT equ P1.1
02C4             57   
                 59   	$LIST
0370             61   
0370             62   ;                     1234567890123456    <- This helps determine the location of the counter
0370 50312020    63   Initial_Message:  db 'P1            P2', 0
     20202020
     20202020
     20205032
     00
0381 00          64   No_Signal_Str:    db '', 0
0382             65   
0382             66   Timer0_Init:
0382 E589        67            mov a, TMOD
0384 54F0        68            anl a, #0xf0 ; Clear the bits for timer 0
0386 4401        69            orl a, #0x01 ; Configure timer 0 as 16-timer
0388 F589        70            mov TMOD, a
038A 758CA9      71            mov TH0, #high(TIMER0_RELOAD)
038D 758A9A      72            mov TL0, #low(TIMER0_RELOAD)
0390             73            ; Set autoreload value
0390 75F4A9      74            mov RH0, #high(TIMER0_RELOAD)
0393 75F29A      75            mov RL0, #low(TIMER0_RELOAD)
0396             76            ; Enable the timer and interrupts
0396 D2A9        77       setb ET0  ; Enable timer 0 interrupt
0398 D28C        78       setb TR0  ; Start timer 0
039A 22          79            ret
039B             80            
039B             81   Timer0_HIGH_Init:
039B E589        82            mov a, TMOD
039D 54F0        83            anl a, #0xf0 ; Clear the bits for timer 0
039F 4401        84            orl a, #0x01 ; Configure timer 0 as 16-timer
03A1 F589        85            mov TMOD, a
03A3 758CEA      86            mov TH0, #high(TIMER0_RELOAD_HIGH)
03A6 758AE8      87            mov TL0, #low(TIMER0_RELOAD_HIGH)
03A9             88            ; Set autoreload value
03A9 75F4EA      89            mov RH0, #high(TIMER0_RELOAD_HIGH)
03AC 75F2E8      90            mov RL0, #low(TIMER0_RELOAD_HIGH)
03AF             91            ; Enable the timer and interrupts
03AF D2A9        92       setb ET0  ; Enable timer 0 interrupt
03B1 D28C        93       setb TR0  ; Start timer 0
03B3 22          94            ret
03B4             95   Timer0_ISR:
03B4             96            ;clr TF0  ; According to the data sheet this is done for us already.
03B4 B291        97            cpl SOUND_OUT ; Connect speaker to P1.1!
03B6 32          98            reti
03B7             99   
03B7            100   ; Sends 10-digit BCD number in bcd to the LCD
03B7            101   Display_10_digit_BCD:
03B7 C000       102            push ar0
03B9 A83C       102            mov r0, bcd+4
03BB 12035A     102            lcall ?Display_BCD
03BE D000       102            pop ar0
03C0 C000       103            push ar0
03C2 A83B       103            mov r0, bcd+3
03C4 12035A     103            lcall ?Display_BCD
03C7 D000       103            pop ar0
03C9 C000       104            push ar0
03CB A83A       104            mov r0, bcd+2
03CD 12035A     104            lcall ?Display_BCD
03D0 D000       104            pop ar0
03D2 C000       105            push ar0
03D4 A839       105            mov r0, bcd+1
03D6 12035A     105            lcall ?Display_BCD
03D9 D000       105            pop ar0
03DB C000       106            push ar0
03DD A838       106            mov r0, bcd+0
03DF 12035A     106            lcall ?Display_BCD
03E2 D000       106            pop ar0
03E4 22         107            ret
03E5            108   
03E5            109   ;Initializes timer/counter 2 as a 16-bit timer
03E5            110   InitTimer2:
03E5 75C800     111            mov T2CON, #0 ; Stop timer/counter.  Set as timer (clock input is pin 22.1184MHz).
03E8            112            ; Set the reload value on overflow to zero (just in case is not zero)
03E8 75CB00     113            mov RCAP2H, #0
03EB 75CA00     114            mov RCAP2L, #0
03EE D2AD       115            setb ET2
03F0 22         116       ret
03F1            117   
03F1            118   Timer2_ISR:
03F1 C2CF       119            clr TF2  ; Timer 2 doesn't clear TF2 automatically. Do it in ISR
03F3 C0E0       120            push acc
03F5 053D       121            inc T2ov+0
03F7 E53D       122            mov a, T2ov+0
03F9 7002       123            jnz Timer2_ISR_done
03FB 053E       124            inc T2ov+1
03FD            125   Timer2_ISR_done:
03FD D0E0       126            pop acc
03FF 32         127            reti
0400            128   
0400            129   ;---------------------------------;
0400            130   ; Hardware initialization         ;
0400            131   ;---------------------------------;
0400            132   Initialize_All:
0400 1203E5     133       lcall InitTimer2
0403 12031E     134       lcall LCD_4BIT ; Initialize LCD
0406 D2AF       135       setb EA
0408 22         136            ret
0409            137   
0409            138   ;---------------------------------;
0409            139   ; Main program loop               ;
0409            140   ;---------------------------------;
0409            141   MyProgram:
0409            142       ; Initialize the hardware:
0409 75817F     143       mov SP, #7FH
040C 120400     144       lcall Initialize_All
040F D280       145       setb P0.0 ; Pin is used as input
0411            146       
0411 120382     147       lcall Timer0_Init
0414 1203E5     148       lcall InitTimer2
0417            149   
0417 C0E0       150            push acc
0419 7401       150            mov a, #1
041B 14         150            dec a
041C 120355     150            lcall ?Set_Cursor_1 ; Select column and row
041F D0E0       150            pop acc
0421 C083       151            push dph
0423 C082       151            push dpl
0425 C0E0       151            push acc
0427 900370     151            mov dptr, #Initial_Message
042A 120348     151            lcall ?Send_Constant_String
042D D0E0       151            pop acc
042F D082       151            pop dpl
0431 D083       151            pop dph
0433            152       
0433 C0E0       153            push acc
0435 7401       153            mov a, #1
0437 14         153            dec a
0438 120353     153            lcall ?Set_Cursor_2 ; Select column and row
043B D0E0       153            pop acc
043D 854330     154       mov x, p1Score
0440 2400       155       add a, #0x00
0442 D4         156       da a
0443 F543       157       mov p1Score, a
0445 C000       158            push ar0
0447 A843       158            mov r0, p1Score
0449 12035A     158            lcall ?Display_BCD
044C D000       158            pop ar0
044E            159       
044E C0E0       160            push acc
0450 740F       160            mov a, #15
0452 14         160            dec a
0453 120353     160            lcall ?Set_Cursor_2 ; Select column and row
0456 D0E0       160            pop acc
0458 854630     161       mov x, p2Score
045B 2400       162       add a, #0x00
045D D4         163       da a
045E F546       164       mov p2Score, a
0460 C000       165            push ar0
0462 A843       165            mov r0, p1Score
0464 12035A     165            lcall ?Display_BCD
0467 D000       165            pop ar0
0469            166       
0469 1206C8     167       lcall Calculate_Capacitance_P21 
046C            168       
046C            169   forever:
046C            170            ; Repeated Random time wait calls are here for show just for now
046C            171            ;Set_Cursor(1, 1)
046C            172            ;lcall Random
046C            173            ;wait random amount of time
046C 1205A7     174       lcall Wait_Random_Time
046F 12039B     175       lcall Timer0_HIGH_Init
0472 C002       176            push AR2
0474 7AFF       176            mov R2, #255
0476 1202CF     176            lcall ?Wait_Milli_Seconds
0479 D002       176            pop AR2
047B C002       177            push AR2
047D 7AFF       177            mov R2, #255
047F 1202CF     177            lcall ?Wait_Milli_Seconds
0482 D002       177            pop AR2
0484 C002       178            push AR2
0486 7AFF       178            mov R2, #255
0488 1202CF     178            lcall ?Wait_Milli_Seconds
048B D002       178            pop AR2
048D C002       179            push AR2
048F 7AFF       179            mov R2, #255
0491 1202CF     179            lcall ?Wait_Milli_Seconds
0494 D002       179            pop AR2
0496 C002       180            push AR2
0498 7AFF       180            mov R2, #255
049A 1202CF     180            lcall ?Wait_Milli_Seconds
049D D002       180            pop AR2
049F C002       181            push AR2
04A1 7AFF       181            mov R2, #255
04A3 1202CF     181            lcall ?Wait_Milli_Seconds
04A6 D002       181            pop AR2
04A8 C002       182            push AR2
04AA 7AFF       182            mov R2, #255
04AC 1202CF     182            lcall ?Wait_Milli_Seconds
04AF D002       182            pop AR2
04B1 C002       183            push AR2
04B3 7AFF       183            mov R2, #255
04B5 1202CF     183            lcall ?Wait_Milli_Seconds
04B8 D002       183            pop AR2
04BA 120382     184       lcall Timer0_Init
04BD 1206C8     185       lcall Calculate_Capacitance_P21 
04C0            186       ;change
04C0            187       
04C0 12056D     188       lcall Random
04C3            189            ;wait random amount of time
04C3 1205A7     190       lcall Wait_Random_Time
04C6 12056D     191       lcall Random
04C9            192            ;wait random amount of time
04C9 1205A7     193       lcall Wait_Random_Time
04CC 12056D     194       lcall Random
04CF            195            ;wait random amount of time
04CF 1205A7     196       lcall Wait_Random_Time
04D2 12056D     197       lcall Random
04D5            198            ;wait random amount of time
04D5 1205A7     199       lcall Wait_Random_Time
04D8            200       
04D8            201       
04D8 C2CA       202       clr TR2 ; Stop timer 2
04DA 75CC00     203       mov TL2, #0
04DD 75CD00     204       mov TH2, #0
04E0 753D00     205       mov T2ov+0, #0
04E3 753E00     206       mov T2ov+1, #0
04E6 C2CF       207       clr TF2
04E8 D2CA       208       setb TR2
04EA            209       
04EA            210       ;Randomize button connected at P2.4
04EA 20A4FD     211       jb P2.4, $
04ED            212       
04ED 85CD3F     213       mov Seed+0, TH2
04F0 754001     214       mov Seed+1, #0x01
04F3 754187     215       mov Seed+2, #0x87
04F6 85CC42     216       mov Seed+3, TL2
04F9 C2CA       217       clr TR2
04FB            218       
04FB            219   synch1:
04FB E53E       220            mov a, T2ov+1
04FD 54FE       221            anl a, #0xfe
04FF 7034       222            jnz no_signal ; If the count is larger than 0x01ffffffff*45ns=1.16s, we assume there is no signal
0501 2080F7     223       jb P0.0, synch1
0504            224   synch2:    
0504 E53E       225            mov a, T2ov+1
0506 54FE       226            anl a, #0xfe
0508 702B       227            jnz no_signal
050A 3080F7     228       jnb P0.0, synch2
050D            229       
050D            230       ; Measure the period of the signal applied to pin P0.0
050D C2CA       231       clr TR2
050F 75CC00     232       mov TL2, #0
0512 75CD00     233       mov TH2, #0
0515 753D00     234       mov T2ov+0, #0
0518 753E00     235       mov T2ov+1, #0
051B C2CF       236       clr TF2
051D D2CA       237       setb TR2 ; Start timer 2
051F            238   measure1:
051F E53E       239            mov a, T2ov+1
0521 54FE       240            anl a, #0xfe
0523 7010       241            jnz no_signal 
0525 2080F7     242       jb P0.0, measure1
0528            243   measure2:    
0528 E53E       244            mov a, T2ov+1
052A 54FE       245            anl a, #0xfe
052C 7007       246            jnz no_signal
052E 3080F7     247       jnb P0.0, measure2
0531 C2CA       248       clr TR2 ; Stop timer 2, [T2ov+1, T2ov+0, TH2, TL2] * 45.21123ns is the period
0533            249   
0533 801F       250            sjmp skip_this
0535            251   no_signal:       
0535 C0E0       252            push acc
0537 7401       252            mov a, #1
0539 14         252            dec a
053A 120353     252            lcall ?Set_Cursor_2 ; Select column and row
053D D0E0       252            pop acc
053F C083       253            push dph
0541 C082       253            push dpl
0543 C0E0       253            push acc
0545 900381     253            mov dptr, #No_Signal_Str
0548 120348     253            lcall ?Send_Constant_String
054B D0E0       253            pop acc
054D D082       253            pop dpl
054F D083       253            pop dph
0551 02046C     254       ljmp forever ; Repeat! 
0554            255   skip_this:
0554            256   
0554            257            ; Make sure [T2ov+1, T2ov+2, TH2, TL2]!=0
0554 E5CC       258            mov a, TL2
0556 45CD       259            orl a, TH2
0558 453D       260            orl a, T2ov+0
055A 453E       261            orl a, T2ov+1
055C 60D7       262            jz no_signal
055E            263            ; Using integer math, convert the period to frequency:
055E 85CC30     264            mov x+0, TL2
0561 85CD31     265            mov x+1, TH2
0564 853D32     266            mov x+2, T2ov+0
0567 853E33     267            mov x+3, T2ov+1
056A            268            
056A            269            
056A            270            ; Convert the result to BCD and display on LCD
056A            271            ;Set_Cursor(2, 1)
056A            272            ;lcall hex2bcd
056A            273            ;lcall Display_10_digit_BCD
056A 02046C     274       ljmp forever ; Repeat! 
056D            275   
056D            276   
056D            277   ;Generates random number
056D            278   Random: 
056D            279            ; Dont worry about this, it is just some math that is good enough to randomize numbers enough for our purposes
056D 853F30     280       mov x+0, Seed+0
0570 854031     281       mov x+1, Seed+1
0573 854132     282       mov x+2, Seed+2
0576 854233     283       mov x+3, Seed+3
0579 7534FD     284            mov y+0, #low (214013 % 0x10000) 
057C 753543     284            mov y+1, #high(214013 % 0x10000) 
057F 753603     284            mov y+2, #low (214013 / 0x10000) 
0582 753700     284            mov y+3, #high(214013 / 0x10000) 
0585 1201A8     285       lcall mul32
0588 7534C3     286            mov y+0, #low (2531011 % 0x10000) 
058B 75359E     286            mov y+1, #high(2531011 % 0x10000) 
058E 753626     286            mov y+2, #low (2531011 / 0x10000) 
0591 753700     286            mov y+3, #high(2531011 / 0x10000) 
0594 1200F3     287       lcall add32
0597 85303F     288       mov Seed+0, x+0
059A 853140     289       mov Seed+1, x+1
059D 853241     290       mov Seed+2, x+2
05A0 853342     291       mov Seed+3, x+3
05A3            292       
05A3            293       ;Set_Cursor(1, 3)
05A3            294            ;lcall hex2bcd
05A3            295            ;lcall Display_10_digit_BCD
05A3 1203B4     296            lcall Timer0_ISR ;Why no alarm trigger?
05A6 22         297       ret
05A7            298       
05A7            299   Wait_Random_Time:
05A7 C002       300            push AR2
05A9 AA3F       300            mov R2, Seed+0
05AB 1202CF     300            lcall ?Wait_Milli_Seconds
05AE D002       300            pop AR2
05B0 C002       301            push AR2
05B2 AA40       301            mov R2, Seed+1
05B4 1202CF     301            lcall ?Wait_Milli_Seconds
05B7 D002       301            pop AR2
05B9 C002       302            push AR2
05BB AA41       302            mov R2, Seed+2
05BD 1202CF     302            lcall ?Wait_Milli_Seconds
05C0 D002       302            pop AR2
05C2 C002       303            push AR2
05C4 AA42       303            mov R2, Seed+3
05C6 1202CF     303            lcall ?Wait_Milli_Seconds
05C9 D002       303            pop AR2
05CB C002       304            push AR2
05CD AA3F       304            mov R2, Seed+0
05CF 1202CF     304            lcall ?Wait_Milli_Seconds
05D2 D002       304            pop AR2
05D4 C002       305            push AR2
05D6 AA40       305            mov R2, Seed+1
05D8 1202CF     305            lcall ?Wait_Milli_Seconds
05DB D002       305            pop AR2
05DD C002       306            push AR2
05DF AA41       306            mov R2, Seed+2
05E1 1202CF     306            lcall ?Wait_Milli_Seconds
05E4 D002       306            pop AR2
05E6 C002       307            push AR2
05E8 AA42       307            mov R2, Seed+3
05EA 1202CF     307            lcall ?Wait_Milli_Seconds
05ED D002       307            pop AR2
05EF C002       308            push AR2
05F1 AA3F       308            mov R2, Seed+0
05F3 1202CF     308            lcall ?Wait_Milli_Seconds
05F6 D002       308            pop AR2
05F8 C002       309            push AR2
05FA AA40       309            mov R2, Seed+1
05FC 1202CF     309            lcall ?Wait_Milli_Seconds
05FF D002       309            pop AR2
0601 C002       310            push AR2
0603 AA41       310            mov R2, Seed+2
0605 1202CF     310            lcall ?Wait_Milli_Seconds
0608 D002       310            pop AR2
060A C002       311            push AR2
060C AA42       311            mov R2, Seed+3
060E 1202CF     311            lcall ?Wait_Milli_Seconds
0611 D002       311            pop AR2
0613 C002       312            push AR2
0615 AA3F       312            mov R2, Seed+0
0617 1202CF     312            lcall ?Wait_Milli_Seconds
061A D002       312            pop AR2
061C C002       313            push AR2
061E AA40       313            mov R2, Seed+1
0620 1202CF     313            lcall ?Wait_Milli_Seconds
0623 D002       313            pop AR2
0625 C002       314            push AR2
0627 AA41       314            mov R2, Seed+2
0629 1202CF     314            lcall ?Wait_Milli_Seconds
062C D002       314            pop AR2
062E C002       315            push AR2
0630 AA42       315            mov R2, Seed+3
0632 1202CF     315            lcall ?Wait_Milli_Seconds
0635 D002       315            pop AR2
0637 C002       316            push AR2
0639 AA3F       316            mov R2, Seed+0
063B 1202CF     316            lcall ?Wait_Milli_Seconds
063E D002       316            pop AR2
0640 C002       317            push AR2
0642 AA40       317            mov R2, Seed+1
0644 1202CF     317            lcall ?Wait_Milli_Seconds
0647 D002       317            pop AR2
0649 C002       318            push AR2
064B AA41       318            mov R2, Seed+2
064D 1202CF     318            lcall ?Wait_Milli_Seconds
0650 D002       318            pop AR2
0652 C002       319            push AR2
0654 AA42       319            mov R2, Seed+3
0656 1202CF     319            lcall ?Wait_Milli_Seconds
0659 D002       319            pop AR2
065B C002       320            push AR2
065D AA3F       320            mov R2, Seed+0
065F 1202CF     320            lcall ?Wait_Milli_Seconds
0662 D002       320            pop AR2
0664 C002       321            push AR2
0666 AA40       321            mov R2, Seed+1
0668 1202CF     321            lcall ?Wait_Milli_Seconds
066B D002       321            pop AR2
066D C002       322            push AR2
066F AA41       322            mov R2, Seed+2
0671 1202CF     322            lcall ?Wait_Milli_Seconds
0674 D002       322            pop AR2
0676 C002       323            push AR2
0678 AA42       323            mov R2, Seed+3
067A 1202CF     323            lcall ?Wait_Milli_Seconds
067D D002       323            pop AR2
067F C002       324            push AR2
0681 AA3F       324            mov R2, Seed+0
0683 1202CF     324            lcall ?Wait_Milli_Seconds
0686 D002       324            pop AR2
0688 C002       325            push AR2
068A AA40       325            mov R2, Seed+1
068C 1202CF     325            lcall ?Wait_Milli_Seconds
068F D002       325            pop AR2
0691 C002       326            push AR2
0693 AA41       326            mov R2, Seed+2
0695 1202CF     326            lcall ?Wait_Milli_Seconds
0698 D002       326            pop AR2
069A C002       327            push AR2
069C AA42       327            mov R2, Seed+3
069E 1202CF     327            lcall ?Wait_Milli_Seconds
06A1 D002       327            pop AR2
06A3 C002       328            push AR2
06A5 AA3F       328            mov R2, Seed+0
06A7 1202CF     328            lcall ?Wait_Milli_Seconds
06AA D002       328            pop AR2
06AC C002       329            push AR2
06AE AA40       329            mov R2, Seed+1
06B0 1202CF     329            lcall ?Wait_Milli_Seconds
06B3 D002       329            pop AR2
06B5 C002       330            push AR2
06B7 AA41       330            mov R2, Seed+2
06B9 1202CF     330            lcall ?Wait_Milli_Seconds
06BC D002       330            pop AR2
06BE C002       331            push AR2
06C0 AA42       331            mov R2, Seed+3
06C2 1202CF     331            lcall ?Wait_Milli_Seconds
06C5 D002       331            pop AR2
06C7 22         332       ret
06C8            333       
06C8            334   Calculate_Capacitance_P21: ; Left one
06C8 75342D     335            mov y+0, #low (45 % 0x10000) 
06CB 753500     335            mov y+1, #high(45 % 0x10000) 
06CE 753600     335            mov y+2, #low (45 / 0x10000) 
06D1 753700     335            mov y+3, #high(45 / 0x10000)  ; One clock pulse is 1/22.1184MHz=45.21123ns
06D4 1201A8     336            lcall mul32
06D7            337            
06D7 75340A     338            mov y+0, #low (10 % 0x10000) 
06DA 753500     338            mov y+1, #high(10 % 0x10000) 
06DD 753600     338            mov y+2, #low (10 / 0x10000) 
06E0 753700     338            mov y+3, #high(10 / 0x10000) 
06E3 120235     339            lcall div32
06E6            340            
06E6 75340A     341            mov y+0, #low (10 % 0x10000) 
06E9 753500     341            mov y+1, #high(10 % 0x10000) 
06EC 753600     341            mov y+2, #low (10 / 0x10000) 
06EF 753700     341            mov y+3, #high(10 / 0x10000) 
06F2 120235     342            lcall div32
06F5            343            
06F5 753490     344            mov y+0, #low (144 % 0x10000) 
06F8 753500     344            mov y+1, #high(144 % 0x10000) 
06FB 753600     344            mov y+2, #low (144 / 0x10000) 
06FE 753700     344            mov y+3, #high(144 / 0x10000) 
0701 1201A8     345            lcall mul32
0704            346            
0704 753464     347            mov y+0, #low (100 % 0x10000) 
0707 753500     347            mov y+1, #high(100 % 0x10000) 
070A 753600     347            mov y+2, #low (100 / 0x10000) 
070D 753700     347            mov y+3, #high(100 / 0x10000) 
0710 120235     348            lcall div32
0713            349            
0713 753464     350            mov y+0, #low (100 % 0x10000) 
0716 753500     350            mov y+1, #high(100 % 0x10000) 
0719 753600     350            mov y+2, #low (100 / 0x10000) 
071C 753700     350            mov y+3, #high(100 / 0x10000) 
071F 120235     351            lcall div32
0722            352            
0722 75340A     353            mov y+0, #low (10 % 0x10000) 
0725 753500     353            mov y+1, #high(10 % 0x10000) 
0728 753600     353            mov y+2, #low (10 / 0x10000) 
072B 753700     353            mov y+3, #high(10 / 0x10000) 
072E 120235     354            lcall div32
0731            355            
0731 753403     356            mov y+0, #low (3 % 0x10000) 
0734 753500     356            mov y+1, #high(3 % 0x10000) 
0737 753600     356            mov y+2, #low (3 / 0x10000) 
073A 753700     356            mov y+3, #high(3 / 0x10000) 
073D 120235     357            lcall div32
0740            358            
0740 753464     359            mov y+0, #low (100 % 0x10000) 
0743 753500     359            mov y+1, #high(100 % 0x10000) 
0746 753600     359            mov y+2, #low (100 / 0x10000) 
0749 753700     359            mov y+3, #high(100 / 0x10000) 
074C 1201A8     360            lcall mul32
074F            361            
074F 753464     362            mov y+0, #low (100 % 0x10000) 
0752 753500     362            mov y+1, #high(100 % 0x10000) 
0755 753600     362            mov y+2, #low (100 / 0x10000) 
0758 753700     362            mov y+3, #high(100 / 0x10000) 
075B 120114     363            lcall sub32
075E            364            
075E 75345F     365            mov y+0, #low (95 % 0x10000) 
0761 753500     365            mov y+1, #high(95 % 0x10000) 
0764 753600     365            mov y+2, #low (95 / 0x10000) 
0767 753700     365            mov y+3, #high(95 / 0x10000) 
076A 120114     366            lcall sub32
076D            367            
076D            368            ; Convert the result to BCD and display on LCD
076D C0E0       369            push acc
076F 7403       369            mov a, #3
0771 14         369            dec a
0772 120355     369            lcall ?Set_Cursor_1 ; Select column and row
0775 D0E0       369            pop acc
0777 12002E     370            lcall hex2bcd
077A 1203B7     371            lcall Display_10_digit_BCD
077D 22         372            ret
077E            373   
077E            374   Calculate_Capacitance_P20: ; Right one
077E            375       
077E            376   en
